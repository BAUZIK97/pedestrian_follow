
Serwo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006190  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d0  080064d0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064d8  080064d8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064dc  080064dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080064e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  200001dc  080066bc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000074c  080066bc  0002074c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ed8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002934  00000000  00000000  000330e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b0  00000000  00000000  00035a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f48  00000000  00000000  00036ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000269ca  00000000  00000000  00037a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e42f  00000000  00000000  0005e3da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec99d  00000000  00000000  0006c809  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001591a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b24  00000000  00000000  00159224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006348 	.word	0x08006348

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08006348 	.word	0x08006348

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b6b      	ldr	r3, [pc, #428]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a6a      	ldr	r2, [pc, #424]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b68      	ldr	r3, [pc, #416]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dca:	4b65      	ldr	r3, [pc, #404]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a64      	ldr	r2, [pc, #400]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b62      	ldr	r3, [pc, #392]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b5f      	ldr	r3, [pc, #380]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a5e      	ldr	r2, [pc, #376]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b5c      	ldr	r3, [pc, #368]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	4b59      	ldr	r3, [pc, #356]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a58      	ldr	r2, [pc, #352]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b56      	ldr	r3, [pc, #344]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	4b53      	ldr	r3, [pc, #332]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a52      	ldr	r2, [pc, #328]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b50      	ldr	r3, [pc, #320]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2a:	4b4d      	ldr	r3, [pc, #308]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a4c      	ldr	r2, [pc, #304]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b4a      	ldr	r3, [pc, #296]	; (8000f60 <MX_GPIO_Init+0x1c4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e48:	4846      	ldr	r0, [pc, #280]	; (8000f64 <MX_GPIO_Init+0x1c8>)
 8000e4a:	f001 f91f 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2140      	movs	r1, #64	; 0x40
 8000e52:	4845      	ldr	r0, [pc, #276]	; (8000f68 <MX_GPIO_Init+0x1cc>)
 8000e54:	f001 f91a 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5e:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <MX_GPIO_Init+0x1d0>)
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4840      	ldr	r0, [pc, #256]	; (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e6e:	f000 ff63 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e72:	2332      	movs	r3, #50	; 0x32
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e82:	230b      	movs	r3, #11
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4838      	ldr	r0, [pc, #224]	; (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e8e:	f000 ff53 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e92:	2386      	movs	r3, #134	; 0x86
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4831      	ldr	r0, [pc, #196]	; (8000f74 <MX_GPIO_Init+0x1d8>)
 8000eae:	f000 ff43 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000eb2:	f244 0381 	movw	r3, #16513	; 0x4081
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4826      	ldr	r0, [pc, #152]	; (8000f64 <MX_GPIO_Init+0x1c8>)
 8000ecc:	f000 ff34 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee2:	230b      	movs	r3, #11
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	481d      	ldr	r0, [pc, #116]	; (8000f64 <MX_GPIO_Init+0x1c8>)
 8000eee:	f000 ff23 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ef2:	2340      	movs	r3, #64	; 0x40
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4817      	ldr	r0, [pc, #92]	; (8000f68 <MX_GPIO_Init+0x1cc>)
 8000f0a:	f000 ff15 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4811      	ldr	r0, [pc, #68]	; (8000f68 <MX_GPIO_Init+0x1cc>)
 8000f22:	f000 ff09 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f38:	230b      	movs	r3, #11
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4809      	ldr	r0, [pc, #36]	; (8000f68 <MX_GPIO_Init+0x1cc>)
 8000f44:	f000 fef8 	bl	8001d38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2028      	movs	r0, #40	; 0x28
 8000f4e:	f000 fe9a 	bl	8001c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f52:	2028      	movs	r0, #40	; 0x28
 8000f54:	f000 feb3 	bl	8001cbe <HAL_NVIC_EnableIRQ>

}
 8000f58:	bf00      	nop
 8000f5a:	3730      	adds	r7, #48	; 0x30
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40021800 	.word	0x40021800
 8000f6c:	10110000 	.word	0x10110000
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020000 	.word	0x40020000

08000f78 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b091      	sub	sp, #68	; 0x44
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

 uint8_t Data[40]; // Tablica przechowujaca wysylana wiadomosc.
 uint16_t size = 0; // Rozmiar wysylanej wiadomosci
 8000f80:	2300      	movs	r3, #0
 8000f82:	87fb      	strh	r3, [r7, #62]	; 0x3e

 size = sprintf(Data, "Odebrana wiadomosc: %s\r",buffer);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <HAL_UART_RxCpltCallback+0x98>)
 8000f8a:	4922      	ldr	r1, [pc, #136]	; (8001014 <HAL_UART_RxCpltCallback+0x9c>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 fd1f 	bl	80059d0 <siprintf>
 8000f92:	4603      	mov	r3, r0
 8000f94:	87fb      	strh	r3, [r7, #62]	; 0x3e

 pwm_duty=atoi(buffer);
 8000f96:	481e      	ldr	r0, [pc, #120]	; (8001010 <HAL_UART_RxCpltCallback+0x98>)
 8000f98:	f004 fce4 	bl	8005964 <atoi>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <HAL_UART_RxCpltCallback+0xa0>)
 8000fa0:	601a      	str	r2, [r3, #0]
 int pwmx_duty = floor(pwm_duty/10000);
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_UART_RxCpltCallback+0xa0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1d      	ldr	r2, [pc, #116]	; (800101c <HAL_UART_RxCpltCallback+0xa4>)
 8000fa8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fac:	1312      	asrs	r2, r2, #12
 8000fae:	17db      	asrs	r3, r3, #31
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff face 	bl	8000554 <__aeabi_i2d>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	460c      	mov	r4, r1
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	4621      	mov	r1, r4
 8000fc0:	f7ff fd44 	bl	8000a4c <__aeabi_d2iz>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	63bb      	str	r3, [r7, #56]	; 0x38
 int pwmy_duty = pwm_duty%10000;
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_UART_RxCpltCallback+0xa0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a13      	ldr	r2, [pc, #76]	; (800101c <HAL_UART_RxCpltCallback+0xa4>)
 8000fce:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd2:	1311      	asrs	r1, r2, #12
 8000fd4:	17da      	asrs	r2, r3, #31
 8000fd6:	1a8a      	subs	r2, r1, r2
 8000fd8:	f242 7110 	movw	r1, #10000	; 0x2710
 8000fdc:	fb01 f202 	mul.w	r2, r1, r2
 8000fe0:	1a9b      	subs	r3, r3, r2
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
 modulate_x(pwmx_duty);
 8000fe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000fe6:	f000 f81f 	bl	8001028 <modulate_x>
 modulate_y(pwmy_duty);
 8000fea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fec:	f000 f86c 	bl	80010c8 <modulate_y>
 HAL_UART_Transmit_IT(&huart3, Data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 8000ff0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <HAL_UART_RxCpltCallback+0xa8>)
 8000ffa:	f003 fa9d 	bl	8004538 <HAL_UART_Transmit_IT>
 HAL_UART_Receive_IT(&huart3, buffer, 8); // Ponowne włączenie nasłuchiwania
 8000ffe:	2208      	movs	r2, #8
 8001000:	4903      	ldr	r1, [pc, #12]	; (8001010 <HAL_UART_RxCpltCallback+0x98>)
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <HAL_UART_RxCpltCallback+0xa8>)
 8001004:	f003 faf4 	bl	80045f0 <HAL_UART_Receive_IT>
 }
 8001008:	bf00      	nop
 800100a:	3744      	adds	r7, #68	; 0x44
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	20000204 	.word	0x20000204
 8001014:	08006360 	.word	0x08006360
 8001018:	20000238 	.word	0x20000238
 800101c:	68db8bad 	.word	0x68db8bad
 8001020:	200002c0 	.word	0x200002c0
 8001024:	00000000 	.word	0x00000000

08001028 <modulate_x>:

void modulate_x(int amp)
  {
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

	amp=((amp-1000)*0.1)*1.25+25;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa8c 	bl	8000554 <__aeabi_i2d>
 800103c:	a31f      	add	r3, pc, #124	; (adr r3, 80010bc <modulate_x+0x94>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff faf1 	bl	8000628 <__aeabi_dmul>
 8001046:	4603      	mov	r3, r0
 8001048:	460c      	mov	r4, r1
 800104a:	4618      	mov	r0, r3
 800104c:	4621      	mov	r1, r4
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modulate_x+0x80>)
 8001054:	f7ff fae8 	bl	8000628 <__aeabi_dmul>
 8001058:	4603      	mov	r3, r0
 800105a:	460c      	mov	r4, r1
 800105c:	4618      	mov	r0, r3
 800105e:	4621      	mov	r1, r4
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <modulate_x+0x84>)
 8001066:	f7ff f929 	bl	80002bc <__adddf3>
 800106a:	4603      	mov	r3, r0
 800106c:	460c      	mov	r4, r1
 800106e:	4618      	mov	r0, r3
 8001070:	4621      	mov	r1, r4
 8001072:	f7ff fceb 	bl	8000a4c <__aeabi_d2iz>
 8001076:	4603      	mov	r3, r0
 8001078:	607b      	str	r3, [r7, #4]
	duty=amp;
 800107a:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <modulate_x+0x88>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6013      	str	r3, [r2, #0]
	int SET_COMPARE=(amp * __HAL_TIM_GET_AUTORELOAD(&htim3))/1000;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <modulate_x+0x8c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	fb02 f303 	mul.w	r3, r2, r3
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <modulate_x+0x90>)
 800108e:	fba2 2303 	umull	r2, r3, r2, r3
 8001092:	099b      	lsrs	r3, r3, #6
 8001094:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,SET_COMPARE);
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <modulate_x+0x8c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
  }
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd90      	pop	{r4, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	3ff40000 	.word	0x3ff40000
 80010ac:	40390000 	.word	0x40390000
 80010b0:	2000023c 	.word	0x2000023c
 80010b4:	20000280 	.word	0x20000280
 80010b8:	10624dd3 	.word	0x10624dd3
 80010bc:	9999999a 	.word	0x9999999a
 80010c0:	3fb99999 	.word	0x3fb99999
 80010c4:	00000000 	.word	0x00000000

080010c8 <modulate_y>:

void modulate_y(int amp)
  {
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	amp=((amp-500)*0.05)*1.25+25;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa3c 	bl	8000554 <__aeabi_i2d>
 80010dc:	a31f      	add	r3, pc, #124	; (adr r3, 800115c <modulate_y+0x94>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff faa1 	bl	8000628 <__aeabi_dmul>
 80010e6:	4603      	mov	r3, r0
 80010e8:	460c      	mov	r4, r1
 80010ea:	4618      	mov	r0, r3
 80010ec:	4621      	mov	r1, r4
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <modulate_y+0x80>)
 80010f4:	f7ff fa98 	bl	8000628 <__aeabi_dmul>
 80010f8:	4603      	mov	r3, r0
 80010fa:	460c      	mov	r4, r1
 80010fc:	4618      	mov	r0, r3
 80010fe:	4621      	mov	r1, r4
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <modulate_y+0x84>)
 8001106:	f7ff f8d9 	bl	80002bc <__adddf3>
 800110a:	4603      	mov	r3, r0
 800110c:	460c      	mov	r4, r1
 800110e:	4618      	mov	r0, r3
 8001110:	4621      	mov	r1, r4
 8001112:	f7ff fc9b 	bl	8000a4c <__aeabi_d2iz>
 8001116:	4603      	mov	r3, r0
 8001118:	607b      	str	r3, [r7, #4]
	duty=amp;
 800111a:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <modulate_y+0x88>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6013      	str	r3, [r2, #0]
	int SET_COMPARE=(amp * __HAL_TIM_GET_AUTORELOAD(&htim3))/1000;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <modulate_y+0x8c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <modulate_y+0x90>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,SET_COMPARE);
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <modulate_y+0x8c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
  }
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}
 8001146:	bf00      	nop
 8001148:	3ff40000 	.word	0x3ff40000
 800114c:	40390000 	.word	0x40390000
 8001150:	2000023c 	.word	0x2000023c
 8001154:	20000280 	.word	0x20000280
 8001158:	10624dd3 	.word	0x10624dd3
 800115c:	9999999a 	.word	0x9999999a
 8001160:	3fa99999 	.word	0x3fa99999

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 fc33 	bl	80019d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f828 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f7ff fe14 	bl	8000d9c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001174:	f000 fafe 	bl	8001774 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001178:	f000 fb78 	bl	800186c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800117c:	f000 f992 	bl	80014a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001180:	f000 fa12 	bl	80015a8 <MX_TIM4_Init>
  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	2101      	movs	r1, #1
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <main+0x4c>)
 800118a:	f000 ff7f 	bl	800208c <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800118e:	4809      	ldr	r0, [pc, #36]	; (80011b4 <main+0x50>)
 8001190:	f002 f984 	bl	800349c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001194:	2100      	movs	r1, #0
 8001196:	4807      	ldr	r0, [pc, #28]	; (80011b4 <main+0x50>)
 8001198:	f002 f9e0 	bl	800355c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800119c:	2104      	movs	r1, #4
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <main+0x50>)
 80011a0:	f002 f9dc 	bl	800355c <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart3, &buffer, 8);
 80011a4:	2208      	movs	r2, #8
 80011a6:	4904      	ldr	r1, [pc, #16]	; (80011b8 <main+0x54>)
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <main+0x58>)
 80011aa:	f003 fa21 	bl	80045f0 <HAL_UART_Receive_IT>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <main+0x4a>
 80011b0:	40020400 	.word	0x40020400
 80011b4:	20000280 	.word	0x20000280
 80011b8:	20000204 	.word	0x20000204
 80011bc:	200002c0 	.word	0x200002c0

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0b4      	sub	sp, #208	; 0xd0
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011ca:	2230      	movs	r2, #48	; 0x30
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fbf6 	bl	80059c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	2284      	movs	r2, #132	; 0x84
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f004 fbe7 	bl	80059c0 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80011f2:	f001 f8c5 	bl	8002380 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <SystemClock_Config+0x114>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a36      	ldr	r2, [pc, #216]	; (80012d4 <SystemClock_Config+0x114>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <SystemClock_Config+0x114>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <SystemClock_Config+0x118>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001216:	4a30      	ldr	r2, [pc, #192]	; (80012d8 <SystemClock_Config+0x118>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <SystemClock_Config+0x118>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122a:	2301      	movs	r3, #1
 800122c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001230:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001242:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001246:	2304      	movs	r3, #4
 8001248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800124c:	2348      	movs	r3, #72	; 0x48
 800124e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001258:	2303      	movs	r3, #3
 800125a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001262:	4618      	mov	r0, r3
 8001264:	f001 f89c 	bl	80023a0 <HAL_RCC_OscConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800126e:	f000 f837 	bl	80012e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001272:	230f      	movs	r3, #15
 8001274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001292:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001296:	2102      	movs	r1, #2
 8001298:	4618      	mov	r0, r3
 800129a:	f001 faf1 	bl	8002880 <HAL_RCC_ClockConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80012a4:	f000 f81c 	bl	80012e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <SystemClock_Config+0x11c>)
 80012aa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 fcd4 	bl	8002c68 <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80012c6:	f000 f80b 	bl	80012e0 <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	37d0      	adds	r7, #208	; 0xd0
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40007000 	.word	0x40007000
 80012dc:	00200100 	.word	0x00200100

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_MspInit+0x44>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_MspInit+0x44>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_MspInit+0x44>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_MspInit+0x44>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_MspInit+0x44>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_MspInit+0x44>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 fb5e 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <TIM3_IRQHandler+0x10>)
 800139a:	f002 f923 	bl	80035e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000280 	.word	0x20000280

080013a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <TIM4_IRQHandler+0x10>)
 80013ae:	f002 f919 	bl	80035e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000240 	.word	0x20000240

080013bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <USART3_IRQHandler+0x10>)
 80013c2:	f003 f9b7 	bl	8004734 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200002c0 	.word	0x200002c0

080013d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013d8:	f000 fe72 	bl	80020c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <_sbrk+0x50>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <_sbrk+0x16>
		heap_end = &end;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <_sbrk+0x50>)
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <_sbrk+0x54>)
 80013f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <_sbrk+0x50>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <_sbrk+0x50>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	466a      	mov	r2, sp
 8001406:	4293      	cmp	r3, r2
 8001408:	d907      	bls.n	800141a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800140a:	f004 faaf 	bl	800596c <__errno>
 800140e:	4602      	mov	r2, r0
 8001410:	230c      	movs	r3, #12
 8001412:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	e006      	b.n	8001428 <_sbrk+0x48>
	}

	heap_end += incr;
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <_sbrk+0x50>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	4a03      	ldr	r2, [pc, #12]	; (8001430 <_sbrk+0x50>)
 8001424:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200001f8 	.word	0x200001f8
 8001434:	20000750 	.word	0x20000750

08001438 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <SystemInit+0x5c>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001442:	4a14      	ldr	r2, [pc, #80]	; (8001494 <SystemInit+0x5c>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <SystemInit+0x60>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a11      	ldr	r2, [pc, #68]	; (8001498 <SystemInit+0x60>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <SystemInit+0x60>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <SystemInit+0x60>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	490d      	ldr	r1, [pc, #52]	; (8001498 <SystemInit+0x60>)
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <SystemInit+0x64>)
 8001466:	4013      	ands	r3, r2
 8001468:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <SystemInit+0x60>)
 800146c:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <SystemInit+0x68>)
 800146e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <SystemInit+0x60>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a08      	ldr	r2, [pc, #32]	; (8001498 <SystemInit+0x60>)
 8001476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <SystemInit+0x60>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SystemInit+0x5c>)
 8001484:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001488:	609a      	str	r2, [r3, #8]
#endif
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00
 8001498:	40023800 	.word	0x40023800
 800149c:	fef6ffff 	.word	0xfef6ffff
 80014a0:	24003010 	.word	0x24003010

080014a4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	; 0x38
 80014a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c4:	463b      	mov	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
 80014d2:	615a      	str	r2, [r3, #20]
 80014d4:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80014d6:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <MX_TIM3_Init+0xfc>)
 80014d8:	4a32      	ldr	r2, [pc, #200]	; (80015a4 <MX_TIM3_Init+0x100>)
 80014da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80014dc:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <MX_TIM3_Init+0xfc>)
 80014de:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <MX_TIM3_Init+0xfc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <MX_TIM3_Init+0xfc>)
 80014ec:	22c7      	movs	r2, #199	; 0xc7
 80014ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_TIM3_Init+0xfc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <MX_TIM3_Init+0xfc>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014fc:	4828      	ldr	r0, [pc, #160]	; (80015a0 <MX_TIM3_Init+0xfc>)
 80014fe:	f001 ffa1 	bl	8003444 <HAL_TIM_Base_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001508:	f7ff feea 	bl	80012e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001516:	4619      	mov	r1, r3
 8001518:	4821      	ldr	r0, [pc, #132]	; (80015a0 <MX_TIM3_Init+0xfc>)
 800151a:	f002 fa9b 	bl	8003a54 <HAL_TIM_ConfigClockSource>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001524:	f7ff fedc 	bl	80012e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001528:	481d      	ldr	r0, [pc, #116]	; (80015a0 <MX_TIM3_Init+0xfc>)
 800152a:	f001 ffe1 	bl	80034f0 <HAL_TIM_PWM_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001534:	f7ff fed4 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	4816      	ldr	r0, [pc, #88]	; (80015a0 <MX_TIM3_Init+0xfc>)
 8001548:	f002 ff2e 	bl	80043a8 <HAL_TIMEx_MasterConfigSynchronization>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001552:	f7ff fec5 	bl	80012e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001556:	2360      	movs	r3, #96	; 0x60
 8001558:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	2200      	movs	r2, #0
 800156a:	4619      	mov	r1, r3
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <MX_TIM3_Init+0xfc>)
 800156e:	f002 f959 	bl	8003824 <HAL_TIM_PWM_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001578:	f7ff feb2 	bl	80012e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	2204      	movs	r2, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4807      	ldr	r0, [pc, #28]	; (80015a0 <MX_TIM3_Init+0xfc>)
 8001584:	f002 f94e 	bl	8003824 <HAL_TIM_PWM_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800158e:	f7ff fea7 	bl	80012e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001592:	4803      	ldr	r0, [pc, #12]	; (80015a0 <MX_TIM3_Init+0xfc>)
 8001594:	f000 f898 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 8001598:	bf00      	nop
 800159a:	3738      	adds	r7, #56	; 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000280 	.word	0x20000280
 80015a4:	40000400 	.word	0x40000400

080015a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_TIM4_Init+0x94>)
 80015c8:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <MX_TIM4_Init+0x98>)
 80015ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <MX_TIM4_Init+0x94>)
 80015ce:	2247      	movs	r2, #71	; 0x47
 80015d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_TIM4_Init+0x94>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <MX_TIM4_Init+0x94>)
 80015da:	2263      	movs	r2, #99	; 0x63
 80015dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_TIM4_Init+0x94>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <MX_TIM4_Init+0x94>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015ea:	4814      	ldr	r0, [pc, #80]	; (800163c <MX_TIM4_Init+0x94>)
 80015ec:	f001 ff2a 	bl	8003444 <HAL_TIM_Base_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80015f6:	f7ff fe73 	bl	80012e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	4619      	mov	r1, r3
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <MX_TIM4_Init+0x94>)
 8001608:	f002 fa24 	bl	8003a54 <HAL_TIM_ConfigClockSource>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001612:	f7ff fe65 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <MX_TIM4_Init+0x94>)
 8001624:	f002 fec0 	bl	80043a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800162e:	f7ff fe57 	bl	80012e0 <Error_Handler>
  }

}
 8001632:	bf00      	nop
 8001634:	3720      	adds	r7, #32
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000240 	.word	0x20000240
 8001640:	40000800 	.word	0x40000800

08001644 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a1a      	ldr	r2, [pc, #104]	; (80016bc <HAL_TIM_Base_MspInit+0x78>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d114      	bne.n	8001680 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_TIM_Base_MspInit+0x7c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_TIM_Base_MspInit+0x7c>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_TIM_Base_MspInit+0x7c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	201d      	movs	r0, #29
 8001674:	f000 fb07 	bl	8001c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001678:	201d      	movs	r0, #29
 800167a:	f000 fb20 	bl	8001cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800167e:	e018      	b.n	80016b2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_TIM_Base_MspInit+0x80>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d113      	bne.n	80016b2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <HAL_TIM_Base_MspInit+0x7c>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <HAL_TIM_Base_MspInit+0x7c>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_TIM_Base_MspInit+0x7c>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	201e      	movs	r0, #30
 80016a8:	f000 faed 	bl	8001c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016ac:	201e      	movs	r0, #30
 80016ae:	f000 fb06 	bl	8001cbe <HAL_NVIC_EnableIRQ>
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40000400 	.word	0x40000400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40000800 	.word	0x40000800

080016c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a1f      	ldr	r2, [pc, #124]	; (8001764 <HAL_TIM_MspPostInit+0x9c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d137      	bne.n	800175a <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <HAL_TIM_MspPostInit+0xa0>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <HAL_TIM_MspPostInit+0xa0>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_TIM_MspPostInit+0xa0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_TIM_MspPostInit+0xa0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_TIM_MspPostInit+0xa0>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_TIM_MspPostInit+0xa0>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800171a:	2340      	movs	r3, #64	; 0x40
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800172a:	2302      	movs	r3, #2
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	480d      	ldr	r0, [pc, #52]	; (800176c <HAL_TIM_MspPostInit+0xa4>)
 8001736:	f000 faff 	bl	8001d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800174a:	2302      	movs	r3, #2
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <HAL_TIM_MspPostInit+0xa8>)
 8001756:	f000 faef 	bl	8001d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40000400 	.word	0x40000400
 8001768:	40023800 	.word	0x40023800
 800176c:	40020000 	.word	0x40020000
 8001770:	40020800 	.word	0x40020800

08001774 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_USART3_UART_Init+0x58>)
 800177a:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <MX_USART3_UART_Init+0x5c>)
 800177c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <MX_USART3_UART_Init+0x58>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USART3_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_USART3_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USART3_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USART3_UART_Init+0x58>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017b8:	f002 fe70 	bl	800449c <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017c2:	f7ff fd8d 	bl	80012e0 <Error_Handler>
  }

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200002c0 	.word	0x200002c0
 80017d0:	40004800 	.word	0x40004800

080017d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <HAL_UART_MspInit+0x8c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d130      	bne.n	8001858 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017f6:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <HAL_UART_MspInit+0x90>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a1a      	ldr	r2, [pc, #104]	; (8001864 <HAL_UART_MspInit+0x90>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_UART_MspInit+0x90>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_UART_MspInit+0x90>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a14      	ldr	r2, [pc, #80]	; (8001864 <HAL_UART_MspInit+0x90>)
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_UART_MspInit+0x90>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001826:	f44f 7340 	mov.w	r3, #768	; 0x300
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001838:	2307      	movs	r3, #7
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4809      	ldr	r0, [pc, #36]	; (8001868 <HAL_UART_MspInit+0x94>)
 8001844:	f000 fa78 	bl	8001d38 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	2027      	movs	r0, #39	; 0x27
 800184e:	f000 fa1a 	bl	8001c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001852:	2027      	movs	r0, #39	; 0x27
 8001854:	f000 fa33 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40004800 	.word	0x40004800
 8001864:	40023800 	.word	0x40023800
 8001868:	40020c00 	.word	0x40020c00

0800186c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001872:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001876:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800187a:	2206      	movs	r2, #6
 800187c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001880:	2202      	movs	r2, #2
 8001882:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800188c:	2202      	movs	r2, #2
 800188e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001892:	2201      	movs	r2, #1
 8001894:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018b0:	f000 fc29 	bl	8002106 <HAL_PCD_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80018ba:	f7ff fd11 	bl	80012e0 <Error_Handler>
  }

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000340 	.word	0x20000340

080018c8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018e8:	d141      	bne.n	800196e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <HAL_PCD_MspInit+0xb0>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a22      	ldr	r2, [pc, #136]	; (8001978 <HAL_PCD_MspInit+0xb0>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_PCD_MspInit+0xb0>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001902:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001914:	230a      	movs	r3, #10
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4817      	ldr	r0, [pc, #92]	; (800197c <HAL_PCD_MspInit+0xb4>)
 8001920:	f000 fa0a 	bl	8001d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4810      	ldr	r0, [pc, #64]	; (800197c <HAL_PCD_MspInit+0xb4>)
 800193a:	f000 f9fd 	bl	8001d38 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_PCD_MspInit+0xb0>)
 8001940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001942:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <HAL_PCD_MspInit+0xb0>)
 8001944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001948:	6353      	str	r3, [r2, #52]	; 0x34
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_PCD_MspInit+0xb0>)
 800194c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_PCD_MspInit+0xb0>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_PCD_MspInit+0xb0>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_PCD_MspInit+0xb0>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001984:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001986:	e003      	b.n	8001990 <LoopCopyDataInit>

08001988 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800198a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800198c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800198e:	3104      	adds	r1, #4

08001990 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001994:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001996:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001998:	d3f6      	bcc.n	8001988 <CopyDataInit>
  ldr  r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800199c:	e002      	b.n	80019a4 <LoopFillZerobss>

0800199e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800199e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019a0:	f842 3b04 	str.w	r3, [r2], #4

080019a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019a8:	d3f9      	bcc.n	800199e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019aa:	f7ff fd45 	bl	8001438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f003 ffe3 	bl	8005978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff fbd7 	bl	8001164 <main>
  bx  lr    
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80019bc:	080064e0 	.word	0x080064e0
  ldr  r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019c4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80019c8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80019cc:	2000074c 	.word	0x2000074c

080019d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC_IRQHandler>

080019d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d6:	2003      	movs	r0, #3
 80019d8:	f000 f94a 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019dc:	2000      	movs	r0, #0
 80019de:	f000 f805 	bl	80019ec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80019e2:	f7ff fc85 	bl	80012f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x54>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x58>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f965 	bl	8001cda <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00e      	b.n	8001a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d80a      	bhi.n	8001a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f000 f92d 	bl	8001c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a2c:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <HAL_InitTick+0x5c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000004 	.word	0x20000004

08001a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_IncTick+0x20>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_IncTick+0x24>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_IncTick+0x24>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000744 	.word	0x20000744

08001a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <HAL_GetTick+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000744 	.word	0x20000744

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff ffee 	bl	8001a74 <HAL_GetTick>
 8001a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d005      	beq.n	8001ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_Delay+0x40>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab2:	bf00      	nop
 8001ab4:	f7ff ffde 	bl	8001a74 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d8f7      	bhi.n	8001ab4 <HAL_Delay+0x28>
  {
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000008 	.word	0x20000008

08001ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <__NVIC_SetPriorityGrouping+0x40>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <__NVIC_SetPriorityGrouping+0x40>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00
 8001b14:	05fa0000 	.word	0x05fa0000

08001b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <__NVIC_GetPriorityGrouping+0x18>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f003 0307 	and.w	r3, r3, #7
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db0b      	blt.n	8001b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4907      	ldr	r1, [pc, #28]	; (8001b6c <__NVIC_EnableIRQ+0x38>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2001      	movs	r0, #1
 8001b56:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	; (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c3c:	d301      	bcc.n	8001c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00f      	b.n	8001c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <SysTick_Config+0x40>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f7ff ff8e 	bl	8001b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <SysTick_Config+0x40>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <SysTick_Config+0x40>)
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	e000e010 	.word	0xe000e010

08001c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff29 	bl	8001ad0 <__NVIC_SetPriorityGrouping>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c98:	f7ff ff3e 	bl	8001b18 <__NVIC_GetPriorityGrouping>
 8001c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	6978      	ldr	r0, [r7, #20]
 8001ca4:	f7ff ff8e 	bl	8001bc4 <NVIC_EncodePriority>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff5d 	bl	8001b70 <__NVIC_SetPriority>
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff31 	bl	8001b34 <__NVIC_EnableIRQ>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffa2 	bl	8001c2c <SysTick_Config>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d004      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2280      	movs	r2, #128	; 0x80
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e00c      	b.n	8001d2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2205      	movs	r2, #5
 8001d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0201 	bic.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e175      	b.n	8002044 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d58:	2201      	movs	r2, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8164 	bne.w	800203e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x4e>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d123      	bne.n	8001dce <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	08da      	lsrs	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3208      	adds	r2, #8
 8001d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	08da      	lsrs	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3208      	adds	r2, #8
 8001dc8:	69b9      	ldr	r1, [r7, #24]
 8001dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0203 	and.w	r2, r3, #3
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d00b      	beq.n	8001e22 <HAL_GPIO_Init+0xea>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e16:	2b11      	cmp	r3, #17
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b12      	cmp	r3, #18
 8001e20:	d130      	bne.n	8001e84 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 0201 	and.w	r2, r3, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80be 	beq.w	800203e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	4b65      	ldr	r3, [pc, #404]	; (8002058 <HAL_GPIO_Init+0x320>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a64      	ldr	r2, [pc, #400]	; (8002058 <HAL_GPIO_Init+0x320>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b62      	ldr	r3, [pc, #392]	; (8002058 <HAL_GPIO_Init+0x320>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eda:	4a60      	ldr	r2, [pc, #384]	; (800205c <HAL_GPIO_Init+0x324>)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a57      	ldr	r2, [pc, #348]	; (8002060 <HAL_GPIO_Init+0x328>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d037      	beq.n	8001f76 <HAL_GPIO_Init+0x23e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a56      	ldr	r2, [pc, #344]	; (8002064 <HAL_GPIO_Init+0x32c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d031      	beq.n	8001f72 <HAL_GPIO_Init+0x23a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a55      	ldr	r2, [pc, #340]	; (8002068 <HAL_GPIO_Init+0x330>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d02b      	beq.n	8001f6e <HAL_GPIO_Init+0x236>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a54      	ldr	r2, [pc, #336]	; (800206c <HAL_GPIO_Init+0x334>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d025      	beq.n	8001f6a <HAL_GPIO_Init+0x232>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a53      	ldr	r2, [pc, #332]	; (8002070 <HAL_GPIO_Init+0x338>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01f      	beq.n	8001f66 <HAL_GPIO_Init+0x22e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a52      	ldr	r2, [pc, #328]	; (8002074 <HAL_GPIO_Init+0x33c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d019      	beq.n	8001f62 <HAL_GPIO_Init+0x22a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a51      	ldr	r2, [pc, #324]	; (8002078 <HAL_GPIO_Init+0x340>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <HAL_GPIO_Init+0x226>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a50      	ldr	r2, [pc, #320]	; (800207c <HAL_GPIO_Init+0x344>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00d      	beq.n	8001f5a <HAL_GPIO_Init+0x222>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4f      	ldr	r2, [pc, #316]	; (8002080 <HAL_GPIO_Init+0x348>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d007      	beq.n	8001f56 <HAL_GPIO_Init+0x21e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4e      	ldr	r2, [pc, #312]	; (8002084 <HAL_GPIO_Init+0x34c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <HAL_GPIO_Init+0x21a>
 8001f4e:	2309      	movs	r3, #9
 8001f50:	e012      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f52:	230a      	movs	r3, #10
 8001f54:	e010      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f56:	2308      	movs	r3, #8
 8001f58:	e00e      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	e00c      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f5e:	2306      	movs	r3, #6
 8001f60:	e00a      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f62:	2305      	movs	r3, #5
 8001f64:	e008      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f66:	2304      	movs	r3, #4
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e004      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e002      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x240>
 8001f76:	2300      	movs	r3, #0
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	f002 0203 	and.w	r2, r2, #3
 8001f7e:	0092      	lsls	r2, r2, #2
 8001f80:	4093      	lsls	r3, r2
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f88:	4934      	ldr	r1, [pc, #208]	; (800205c <HAL_GPIO_Init+0x324>)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f96:	4b3c      	ldr	r3, [pc, #240]	; (8002088 <HAL_GPIO_Init+0x350>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fba:	4a33      	ldr	r2, [pc, #204]	; (8002088 <HAL_GPIO_Init+0x350>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fc0:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_GPIO_Init+0x350>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe4:	4a28      	ldr	r2, [pc, #160]	; (8002088 <HAL_GPIO_Init+0x350>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fea:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_GPIO_Init+0x350>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800200e:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <HAL_GPIO_Init+0x350>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <HAL_GPIO_Init+0x350>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002038:	4a13      	ldr	r2, [pc, #76]	; (8002088 <HAL_GPIO_Init+0x350>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b0f      	cmp	r3, #15
 8002048:	f67f ae86 	bls.w	8001d58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800204c:	bf00      	nop
 800204e:	3724      	adds	r7, #36	; 0x24
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40023800 	.word	0x40023800
 800205c:	40013800 	.word	0x40013800
 8002060:	40020000 	.word	0x40020000
 8002064:	40020400 	.word	0x40020400
 8002068:	40020800 	.word	0x40020800
 800206c:	40020c00 	.word	0x40020c00
 8002070:	40021000 	.word	0x40021000
 8002074:	40021400 	.word	0x40021400
 8002078:	40021800 	.word	0x40021800
 800207c:	40021c00 	.word	0x40021c00
 8002080:	40022000 	.word	0x40022000
 8002084:	40022400 	.word	0x40022400
 8002088:	40013c00 	.word	0x40013c00

0800208c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
 8002098:	4613      	mov	r3, r2
 800209a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800209c:	787b      	ldrb	r3, [r7, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020a8:	e003      	b.n	80020b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020aa:	887b      	ldrh	r3, [r7, #2]
 80020ac:	041a      	lsls	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	619a      	str	r2, [r3, #24]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f806 	bl	80020f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40013c00 	.word	0x40013c00

080020f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002106:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002108:	b08f      	sub	sp, #60	; 0x3c
 800210a:	af0a      	add	r7, sp, #40	; 0x28
 800210c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e10a      	b.n	800232e <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fbcb 	bl	80018c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2203      	movs	r2, #3
 8002136:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f003 f9aa 	bl	8005498 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	687e      	ldr	r6, [r7, #4]
 800214c:	466d      	mov	r5, sp
 800214e:	f106 0410 	add.w	r4, r6, #16
 8002152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800215e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002162:	1d33      	adds	r3, r6, #4
 8002164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002166:	6838      	ldr	r0, [r7, #0]
 8002168:	f003 f93e 	bl	80053e8 <USB_CoreInit>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2202      	movs	r2, #2
 8002176:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0d7      	b.n	800232e <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f003 f998 	bl	80054ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	e04a      	b.n	8002226 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	333d      	adds	r3, #61	; 0x3d
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	333c      	adds	r3, #60	; 0x3c
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	b298      	uxth	r0, r3
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	3342      	adds	r3, #66	; 0x42
 80021cc:	4602      	mov	r2, r0
 80021ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	333f      	adds	r3, #63	; 0x3f
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3344      	adds	r3, #68	; 0x44
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	3348      	adds	r3, #72	; 0x48
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	3350      	adds	r3, #80	; 0x50
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	3301      	adds	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	d3af      	bcc.n	8002190 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	e044      	b.n	80022c0 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	3301      	adds	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d3b5      	bcc.n	8002236 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	687e      	ldr	r6, [r7, #4]
 80022d2:	466d      	mov	r5, sp
 80022d4:	f106 0410 	add.w	r4, r6, #16
 80022d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80022e8:	1d33      	adds	r3, r6, #4
 80022ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ec:	6838      	ldr	r0, [r7, #0]
 80022ee:	f003 f90f 	bl	8005510 <USB_DevInit>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e014      	b.n	800232e <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	2b01      	cmp	r3, #1
 800231a:	d102      	bne.n	8002322 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f80b 	bl	8002338 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f003 facf 	bl	80058ca <USB_DevDisconnect>

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002338 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_PCDEx_ActivateLPM+0x44>)
 8002368:	4313      	orrs	r3, r2
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	10000003 	.word	0x10000003

08002380 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40007000 	.word	0x40007000

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e25c      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8087 	beq.w	80024d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023c4:	4b96      	ldr	r3, [pc, #600]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d00c      	beq.n	80023ea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d0:	4b93      	ldr	r3, [pc, #588]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d112      	bne.n	8002402 <HAL_RCC_OscConfig+0x62>
 80023dc:	4b90      	ldr	r3, [pc, #576]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e8:	d10b      	bne.n	8002402 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ea:	4b8d      	ldr	r3, [pc, #564]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d06c      	beq.n	80024d0 <HAL_RCC_OscConfig+0x130>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d168      	bne.n	80024d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e236      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x7a>
 800240c:	4b84      	ldr	r3, [pc, #528]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a83      	ldr	r2, [pc, #524]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e02e      	b.n	8002478 <HAL_RCC_OscConfig+0xd8>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x9c>
 8002422:	4b7f      	ldr	r3, [pc, #508]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a7e      	ldr	r2, [pc, #504]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b7c      	ldr	r3, [pc, #496]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7b      	ldr	r2, [pc, #492]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e01d      	b.n	8002478 <HAL_RCC_OscConfig+0xd8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0xc0>
 8002446:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a75      	ldr	r2, [pc, #468]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800244c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b73      	ldr	r3, [pc, #460]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a72      	ldr	r2, [pc, #456]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0xd8>
 8002460:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a6e      	ldr	r2, [pc, #440]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b6c      	ldr	r3, [pc, #432]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6b      	ldr	r2, [pc, #428]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d013      	beq.n	80024a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7ff faf8 	bl	8001a74 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002488:	f7ff faf4 	bl	8001a74 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e1ea      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b61      	ldr	r3, [pc, #388]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0xe8>
 80024a6:	e014      	b.n	80024d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7ff fae4 	bl	8001a74 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b0:	f7ff fae0 	bl	8001a74 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e1d6      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	4b57      	ldr	r3, [pc, #348]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x110>
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d069      	beq.n	80025b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024de:	4b50      	ldr	r3, [pc, #320]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00b      	beq.n	8002502 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ea:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d11c      	bne.n	8002530 <HAL_RCC_OscConfig+0x190>
 80024f6:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d116      	bne.n	8002530 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_RCC_OscConfig+0x17a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e1aa      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251a:	4b41      	ldr	r3, [pc, #260]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	493d      	ldr	r1, [pc, #244]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	e040      	b.n	80025b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d023      	beq.n	8002580 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002538:	4b39      	ldr	r3, [pc, #228]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a38      	ldr	r2, [pc, #224]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7ff fa96 	bl	8001a74 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254c:	f7ff fa92 	bl	8001a74 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e188      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4929      	ldr	r1, [pc, #164]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
 800257e:	e018      	b.n	80025b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a26      	ldr	r2, [pc, #152]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff fa72 	bl	8001a74 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002594:	f7ff fa6e 	bl	8001a74 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e164      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d038      	beq.n	8002630 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d019      	beq.n	80025fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80025c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ca:	4a15      	ldr	r2, [pc, #84]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d2:	f7ff fa4f 	bl	8001a74 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025da:	f7ff fa4b 	bl	8001a74 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e141      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80025ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x23a>
 80025f8:	e01a      	b.n	8002630 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80025fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fe:	4a08      	ldr	r2, [pc, #32]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002606:	f7ff fa35 	bl	8001a74 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800260e:	f7ff fa31 	bl	8001a74 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d903      	bls.n	8002624 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e127      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
 8002620:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	4b94      	ldr	r3, [pc, #592]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ee      	bne.n	800260e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80a4 	beq.w	8002786 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263e:	4b8e      	ldr	r3, [pc, #568]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10d      	bne.n	8002666 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b8b      	ldr	r3, [pc, #556]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a8a      	ldr	r2, [pc, #552]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b88      	ldr	r3, [pc, #544]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002666:	4b85      	ldr	r3, [pc, #532]	; (800287c <HAL_RCC_OscConfig+0x4dc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d118      	bne.n	80026a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002672:	4b82      	ldr	r3, [pc, #520]	; (800287c <HAL_RCC_OscConfig+0x4dc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a81      	ldr	r2, [pc, #516]	; (800287c <HAL_RCC_OscConfig+0x4dc>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7ff f9f9 	bl	8001a74 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7ff f9f5 	bl	8001a74 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b64      	cmp	r3, #100	; 0x64
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0eb      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002698:	4b78      	ldr	r3, [pc, #480]	; (800287c <HAL_RCC_OscConfig+0x4dc>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x31a>
 80026ac:	4b72      	ldr	r3, [pc, #456]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a71      	ldr	r2, [pc, #452]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	e02d      	b.n	8002716 <HAL_RCC_OscConfig+0x376>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x33c>
 80026c2:	4b6d      	ldr	r3, [pc, #436]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a6c      	ldr	r2, [pc, #432]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
 80026ce:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a69      	ldr	r2, [pc, #420]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	e01c      	b.n	8002716 <HAL_RCC_OscConfig+0x376>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x35e>
 80026e4:	4b64      	ldr	r3, [pc, #400]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a63      	ldr	r2, [pc, #396]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	4b61      	ldr	r3, [pc, #388]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	4a60      	ldr	r2, [pc, #384]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	; 0x70
 80026fc:	e00b      	b.n	8002716 <HAL_RCC_OscConfig+0x376>
 80026fe:	4b5e      	ldr	r3, [pc, #376]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a5d      	ldr	r2, [pc, #372]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
 800270a:	4b5b      	ldr	r3, [pc, #364]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	4a5a      	ldr	r2, [pc, #360]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d015      	beq.n	800274a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7ff f9a9 	bl	8001a74 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7ff f9a5 	bl	8001a74 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e099      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	4b4e      	ldr	r3, [pc, #312]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ee      	beq.n	8002726 <HAL_RCC_OscConfig+0x386>
 8002748:	e014      	b.n	8002774 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274a:	f7ff f993 	bl	8001a74 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7ff f98f 	bl	8001a74 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e083      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002768:	4b43      	ldr	r3, [pc, #268]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ee      	bne.n	8002752 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277a:	4b3f      	ldr	r3, [pc, #252]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a3e      	ldr	r2, [pc, #248]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d06f      	beq.n	800286e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800278e:	4b3a      	ldr	r3, [pc, #232]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b08      	cmp	r3, #8
 8002798:	d067      	beq.n	800286a <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d149      	bne.n	8002836 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b35      	ldr	r3, [pc, #212]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a34      	ldr	r2, [pc, #208]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80027a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7ff f961 	bl	8001a74 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b6:	f7ff f95d 	bl	8001a74 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e053      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	019b      	lsls	r3, r3, #6
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	3b01      	subs	r3, #1
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	061b      	lsls	r3, r3, #24
 80027f8:	4313      	orrs	r3, r2
 80027fa:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80027fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002800:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800280c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280e:	f7ff f931 	bl	8001a74 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002816:	f7ff f92d 	bl	8001a74 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e023      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x476>
 8002834:	e01b      	b.n	800286e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 800283c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7ff f917 	bl	8001a74 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284a:	f7ff f913 	bl	8001a74 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e009      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f0      	bne.n	800284a <HAL_RCC_OscConfig+0x4aa>
 8002868:	e001      	b.n	800286e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	40007000 	.word	0x40007000

08002880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0ce      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b69      	ldr	r3, [pc, #420]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d910      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b66      	ldr	r3, [pc, #408]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 020f 	bic.w	r2, r3, #15
 80028ae:	4964      	ldr	r1, [pc, #400]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b62      	ldr	r3, [pc, #392]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0b6      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e0:	4b58      	ldr	r3, [pc, #352]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a57      	ldr	r2, [pc, #348]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f8:	4b52      	ldr	r3, [pc, #328]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a51      	ldr	r2, [pc, #324]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002902:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	4b4f      	ldr	r3, [pc, #316]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	494c      	ldr	r1, [pc, #304]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d040      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d115      	bne.n	8002962 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07d      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002942:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e071      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	4b3c      	ldr	r3, [pc, #240]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e069      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002962:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4935      	ldr	r1, [pc, #212]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002974:	f7ff f87e 	bl	8001a74 <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7ff f87a 	bl	8001a74 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e051      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 020c 	and.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1eb      	bne.n	800297c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a4:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d210      	bcs.n	80029d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 020f 	bic.w	r2, r3, #15
 80029ba:	4921      	ldr	r1, [pc, #132]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e030      	b.n	8002a36 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4915      	ldr	r1, [pc, #84]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	490d      	ldr	r1, [pc, #52]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a12:	f000 f81d 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8002a16:	4601      	mov	r1, r0
 8002a18:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	5cd3      	ldrb	r3, [r2, r3]
 8002a26:	fa21 f303 	lsr.w	r3, r1, r3
 8002a2a:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <HAL_RCC_ClockConfig+0x1cc>)
 8002a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7fe ffdc 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023c00 	.word	0x40023c00
 8002a44:	40023800 	.word	0x40023800
 8002a48:	08006378 	.word	0x08006378
 8002a4c:	20000000 	.word	0x20000000

08002a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a66:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d007      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x32>
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d008      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x38>
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 80b4 	bne.w	8002be4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a7c:	4b5e      	ldr	r3, [pc, #376]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a7e:	60bb      	str	r3, [r7, #8]
       break;
 8002a80:	e0b3      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a82:	4b5e      	ldr	r3, [pc, #376]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002a84:	60bb      	str	r3, [r7, #8]
      break;
 8002a86:	e0b0      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a88:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a90:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a92:	4b58      	ldr	r3, [pc, #352]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d04a      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9e:	4b55      	ldr	r3, [pc, #340]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	099b      	lsrs	r3, r3, #6
 8002aa4:	f04f 0400 	mov.w	r4, #0
 8002aa8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	ea03 0501 	and.w	r5, r3, r1
 8002ab4:	ea04 0602 	and.w	r6, r4, r2
 8002ab8:	4629      	mov	r1, r5
 8002aba:	4632      	mov	r2, r6
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	f04f 0400 	mov.w	r4, #0
 8002ac4:	0154      	lsls	r4, r2, #5
 8002ac6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aca:	014b      	lsls	r3, r1, #5
 8002acc:	4619      	mov	r1, r3
 8002ace:	4622      	mov	r2, r4
 8002ad0:	1b49      	subs	r1, r1, r5
 8002ad2:	eb62 0206 	sbc.w	r2, r2, r6
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	f04f 0400 	mov.w	r4, #0
 8002ade:	0194      	lsls	r4, r2, #6
 8002ae0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ae4:	018b      	lsls	r3, r1, #6
 8002ae6:	1a5b      	subs	r3, r3, r1
 8002ae8:	eb64 0402 	sbc.w	r4, r4, r2
 8002aec:	f04f 0100 	mov.w	r1, #0
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	00e2      	lsls	r2, r4, #3
 8002af6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002afa:	00d9      	lsls	r1, r3, #3
 8002afc:	460b      	mov	r3, r1
 8002afe:	4614      	mov	r4, r2
 8002b00:	195b      	adds	r3, r3, r5
 8002b02:	eb44 0406 	adc.w	r4, r4, r6
 8002b06:	f04f 0100 	mov.w	r1, #0
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	0262      	lsls	r2, r4, #9
 8002b10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b14:	0259      	lsls	r1, r3, #9
 8002b16:	460b      	mov	r3, r1
 8002b18:	4614      	mov	r4, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	4621      	mov	r1, r4
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f04f 0400 	mov.w	r4, #0
 8002b24:	461a      	mov	r2, r3
 8002b26:	4623      	mov	r3, r4
 8002b28:	f7fd ffb8 	bl	8000a9c <__aeabi_uldivmod>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	460c      	mov	r4, r1
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e049      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	f04f 0400 	mov.w	r4, #0
 8002b3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	ea03 0501 	and.w	r5, r3, r1
 8002b4a:	ea04 0602 	and.w	r6, r4, r2
 8002b4e:	4629      	mov	r1, r5
 8002b50:	4632      	mov	r2, r6
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	f04f 0400 	mov.w	r4, #0
 8002b5a:	0154      	lsls	r4, r2, #5
 8002b5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b60:	014b      	lsls	r3, r1, #5
 8002b62:	4619      	mov	r1, r3
 8002b64:	4622      	mov	r2, r4
 8002b66:	1b49      	subs	r1, r1, r5
 8002b68:	eb62 0206 	sbc.w	r2, r2, r6
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	f04f 0400 	mov.w	r4, #0
 8002b74:	0194      	lsls	r4, r2, #6
 8002b76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b7a:	018b      	lsls	r3, r1, #6
 8002b7c:	1a5b      	subs	r3, r3, r1
 8002b7e:	eb64 0402 	sbc.w	r4, r4, r2
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	00e2      	lsls	r2, r4, #3
 8002b8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b90:	00d9      	lsls	r1, r3, #3
 8002b92:	460b      	mov	r3, r1
 8002b94:	4614      	mov	r4, r2
 8002b96:	195b      	adds	r3, r3, r5
 8002b98:	eb44 0406 	adc.w	r4, r4, r6
 8002b9c:	f04f 0100 	mov.w	r1, #0
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	02a2      	lsls	r2, r4, #10
 8002ba6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002baa:	0299      	lsls	r1, r3, #10
 8002bac:	460b      	mov	r3, r1
 8002bae:	4614      	mov	r4, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f04f 0400 	mov.w	r4, #0
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4623      	mov	r3, r4
 8002bbe:	f7fd ff6d 	bl	8000a9c <__aeabi_uldivmod>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	460c      	mov	r4, r1
 8002bc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	60bb      	str	r3, [r7, #8]
      break;
 8002be2:	e002      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002be6:	60bb      	str	r3, [r7, #8]
      break;
 8002be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bea:	68bb      	ldr	r3, [r7, #8]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	00f42400 	.word	0x00f42400
 8002bfc:	007a1200 	.word	0x007a1200

08002c00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000000 	.word	0x20000000

08002c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c1c:	f7ff fff0 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c20:	4601      	mov	r1, r0
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	0a9b      	lsrs	r3, r3, #10
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4a03      	ldr	r2, [pc, #12]	; (8002c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2e:	5cd3      	ldrb	r3, [r2, r3]
 8002c30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	08006388 	.word	0x08006388

08002c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c44:	f7ff ffdc 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c48:	4601      	mov	r1, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	0b5b      	lsrs	r3, r3, #13
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4a03      	ldr	r2, [pc, #12]	; (8002c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	08006388 	.word	0x08006388

08002c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c90:	4b69      	ldr	r3, [pc, #420]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a68      	ldr	r2, [pc, #416]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c9a:	6093      	str	r3, [r2, #8]
 8002c9c:	4b66      	ldr	r3, [pc, #408]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca4:	4964      	ldr	r1, [pc, #400]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d017      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cc2:	4b5d      	ldr	r3, [pc, #372]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	4959      	ldr	r1, [pc, #356]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d017      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cfe:	4b4e      	ldr	r3, [pc, #312]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	494a      	ldr	r1, [pc, #296]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 808b 	beq.w	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d4c:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	4a39      	ldr	r2, [pc, #228]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d56:	6413      	str	r3, [r2, #64]	; 0x40
 8002d58:	4b37      	ldr	r3, [pc, #220]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d64:	4b35      	ldr	r3, [pc, #212]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a34      	ldr	r2, [pc, #208]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d70:	f7fe fe80 	bl	8001a74 <HAL_GetTick>
 8002d74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d78:	f7fe fe7c 	bl	8001a74 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e355      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d8a:	4b2c      	ldr	r3, [pc, #176]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d96:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d035      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d02e      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002db4:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dbe:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dca:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002dd6:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ddc:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d114      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe fe44 	bl	8001a74 <HAL_GetTick>
 8002dec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dee:	e00a      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fe fe40 	bl	8001a74 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e317      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e06:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0ee      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e1e:	d111      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e2e:	400b      	ands	r3, r1
 8002e30:	4901      	ldr	r1, [pc, #4]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
 8002e36:	e00b      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	0ffffcff 	.word	0x0ffffcff
 8002e44:	4bb0      	ldr	r3, [pc, #704]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4aaf      	ldr	r2, [pc, #700]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e4e:	6093      	str	r3, [r2, #8]
 8002e50:	4bad      	ldr	r3, [pc, #692]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5c:	49aa      	ldr	r1, [pc, #680]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d010      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e6e:	4ba6      	ldr	r3, [pc, #664]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e74:	4aa4      	ldr	r2, [pc, #656]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e7e:	4ba2      	ldr	r3, [pc, #648]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	499f      	ldr	r1, [pc, #636]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e9c:	4b9a      	ldr	r3, [pc, #616]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eaa:	4997      	ldr	r1, [pc, #604]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ebe:	4b92      	ldr	r3, [pc, #584]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ecc:	498e      	ldr	r1, [pc, #568]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ee0:	4b89      	ldr	r3, [pc, #548]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eee:	4986      	ldr	r1, [pc, #536]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f02:	4b81      	ldr	r3, [pc, #516]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	497d      	ldr	r1, [pc, #500]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f24:	4b78      	ldr	r3, [pc, #480]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4975      	ldr	r1, [pc, #468]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f46:	4b70      	ldr	r3, [pc, #448]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4c:	f023 020c 	bic.w	r2, r3, #12
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f54:	496c      	ldr	r1, [pc, #432]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f68:	4b67      	ldr	r3, [pc, #412]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	4964      	ldr	r1, [pc, #400]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f8a:	4b5f      	ldr	r3, [pc, #380]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f90:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f98:	495b      	ldr	r1, [pc, #364]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fac:	4b56      	ldr	r3, [pc, #344]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	4953      	ldr	r1, [pc, #332]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002fce:	4b4e      	ldr	r3, [pc, #312]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	494a      	ldr	r1, [pc, #296]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ff0:	4b45      	ldr	r3, [pc, #276]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffe:	4942      	ldr	r1, [pc, #264]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003012:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003020:	4939      	ldr	r1, [pc, #228]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003034:	4b34      	ldr	r3, [pc, #208]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003042:	4931      	ldr	r1, [pc, #196]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d011      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003056:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003064:	4928      	ldr	r1, [pc, #160]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003074:	d101      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003076:	2301      	movs	r3, #1
 8003078:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003086:	2301      	movs	r3, #1
 8003088:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003096:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a4:	4918      	ldr	r1, [pc, #96]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c8:	490f      	ldr	r1, [pc, #60]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d005      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030de:	f040 80d8 	bne.w	8003292 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a08      	ldr	r2, [pc, #32]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ee:	f7fe fcc1 	bl	8001a74 <HAL_GetTick>
 80030f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030f4:	e00a      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030f6:	f7fe fcbd 	bl	8001a74 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b64      	cmp	r3, #100	; 0x64
 8003102:	d903      	bls.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e196      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003108:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800310c:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ee      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d021      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11d      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800312c:	4b64      	ldr	r3, [pc, #400]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003132:	0c1b      	lsrs	r3, r3, #16
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800313a:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800313c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003140:	0e1b      	lsrs	r3, r3, #24
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	019a      	lsls	r2, r3, #6
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	431a      	orrs	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	061b      	lsls	r3, r3, #24
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	071b      	lsls	r3, r3, #28
 8003160:	4957      	ldr	r1, [pc, #348]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d004      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02e      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003192:	d129      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003194:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319a:	0c1b      	lsrs	r3, r3, #16
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a8:	0f1b      	lsrs	r3, r3, #28
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	019a      	lsls	r2, r3, #6
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	041b      	lsls	r3, r3, #16
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	061b      	lsls	r3, r3, #24
 80031c2:	431a      	orrs	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	071b      	lsls	r3, r3, #28
 80031c8:	493d      	ldr	r1, [pc, #244]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031d0:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d6:	f023 021f 	bic.w	r2, r3, #31
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	3b01      	subs	r3, #1
 80031e0:	4937      	ldr	r1, [pc, #220]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01d      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031f4:	4b32      	ldr	r3, [pc, #200]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fa:	0e1b      	lsrs	r3, r3, #24
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003208:	0f1b      	lsrs	r3, r3, #28
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	019a      	lsls	r2, r3, #6
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	041b      	lsls	r3, r3, #16
 800321c:	431a      	orrs	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	431a      	orrs	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	071b      	lsls	r3, r3, #28
 8003228:	4925      	ldr	r1, [pc, #148]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d011      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	019a      	lsls	r2, r3, #6
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	041b      	lsls	r3, r3, #16
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	061b      	lsls	r3, r3, #24
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	071b      	lsls	r3, r3, #28
 8003258:	4919      	ldr	r1, [pc, #100]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003260:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a16      	ldr	r2, [pc, #88]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003266:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800326a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326c:	f7fe fc02 	bl	8001a74 <HAL_GetTick>
 8003270:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003274:	f7fe fbfe 	bl	8001a74 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0d7      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 80cd 	bne.w	8003434 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a6:	f7fe fbe5 	bl	8001a74 <HAL_GetTick>
 80032aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032ae:	f7fe fbe1 	bl	8001a74 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b64      	cmp	r3, #100	; 0x64
 80032ba:	d903      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0ba      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80032c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032c4:	4b5e      	ldr	r3, [pc, #376]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d0:	d0ed      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d02e      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d12a      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032fa:	4b51      	ldr	r3, [pc, #324]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	0c1b      	lsrs	r3, r3, #16
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003308:	4b4d      	ldr	r3, [pc, #308]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	0f1b      	lsrs	r3, r3, #28
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	019a      	lsls	r2, r3, #6
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	061b      	lsls	r3, r3, #24
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	071b      	lsls	r3, r3, #28
 800332e:	4944      	ldr	r1, [pc, #272]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003336:	4b42      	ldr	r3, [pc, #264]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800333c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	3b01      	subs	r3, #1
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	493d      	ldr	r1, [pc, #244]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d022      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003364:	d11d      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003366:	4b36      	ldr	r3, [pc, #216]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	0e1b      	lsrs	r3, r3, #24
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003374:	4b32      	ldr	r3, [pc, #200]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	0f1b      	lsrs	r3, r3, #28
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	019a      	lsls	r2, r3, #6
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	431a      	orrs	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	061b      	lsls	r3, r3, #24
 8003394:	431a      	orrs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	071b      	lsls	r3, r3, #28
 800339a:	4929      	ldr	r1, [pc, #164]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d028      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b4:	0e1b      	lsrs	r3, r3, #24
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033bc:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	019a      	lsls	r2, r3, #6
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	041b      	lsls	r3, r3, #16
 80033d4:	431a      	orrs	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	061b      	lsls	r3, r3, #24
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	071b      	lsls	r3, r3, #28
 80033e2:	4917      	ldr	r1, [pc, #92]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4911      	ldr	r1, [pc, #68]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0e      	ldr	r2, [pc, #56]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800340c:	f7fe fb32 	bl	8001a74 <HAL_GetTick>
 8003410:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003414:	f7fe fb2e 	bl	8001a74 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e007      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800342e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003432:	d1ef      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800

08003444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e01d      	b.n	8003492 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe f8ea 	bl	8001644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3304      	adds	r3, #4
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f000 fbd2 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <HAL_TIM_Base_Start_IT+0x50>)
 80034bc:	4013      	ands	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d00b      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x42>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d007      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	00010007 	.word	0x00010007

080034f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e01d      	b.n	800353e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f815 	bl	8003546 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	4619      	mov	r1, r3
 800352e:	4610      	mov	r0, r2
 8003530:	f000 fb7c 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2201      	movs	r2, #1
 800356c:	6839      	ldr	r1, [r7, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fef4 	bl	800435c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a17      	ldr	r2, [pc, #92]	; (80035d8 <HAL_TIM_PWM_Start+0x7c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_TIM_PWM_Start+0x2c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a16      	ldr	r2, [pc, #88]	; (80035dc <HAL_TIM_PWM_Start+0x80>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_TIM_PWM_Start+0x30>
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_TIM_PWM_Start+0x32>
 800358c:	2300      	movs	r3, #0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <HAL_TIM_PWM_Start+0x84>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b06      	cmp	r3, #6
 80035b2:	d00b      	beq.n	80035cc <HAL_TIM_PWM_Start+0x70>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ba:	d007      	beq.n	80035cc <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40010000 	.word	0x40010000
 80035dc:	40010400 	.word	0x40010400
 80035e0:	00010007 	.word	0x00010007

080035e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d122      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b02      	cmp	r3, #2
 8003606:	d11b      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0202 	mvn.w	r2, #2
 8003610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fae2 	bl	8003bf0 <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fad4 	bl	8003bdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fae5 	bl	8003c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b04      	cmp	r3, #4
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0204 	mvn.w	r2, #4
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fab8 	bl	8003bf0 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 faaa 	bl	8003bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fabb 	bl	8003c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d122      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d11b      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0208 	mvn.w	r2, #8
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2204      	movs	r2, #4
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa8e 	bl	8003bf0 <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fa80 	bl	8003bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fa91 	bl	8003c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d122      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b10      	cmp	r3, #16
 8003702:	d11b      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0210 	mvn.w	r2, #16
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2208      	movs	r2, #8
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fa64 	bl	8003bf0 <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fa56 	bl	8003bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fa67 	bl	8003c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d10e      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0201 	mvn.w	r2, #1
 8003760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fa30 	bl	8003bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d10e      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	2b80      	cmp	r3, #128	; 0x80
 8003782:	d107      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800378c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fe70 	bl	8004474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a2:	d10e      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d107      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fe63 	bl	8004488 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d10e      	bne.n	80037ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d107      	bne.n	80037ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fa15 	bl	8003c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d10e      	bne.n	800381a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b20      	cmp	r3, #32
 8003808:	d107      	bne.n	800381a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f06f 0220 	mvn.w	r2, #32
 8003812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fe23 	bl	8004460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800383a:	2302      	movs	r3, #2
 800383c:	e105      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x226>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b14      	cmp	r3, #20
 8003852:	f200 80f0 	bhi.w	8003a36 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003856:	a201      	add	r2, pc, #4	; (adr r2, 800385c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385c:	080038b1 	.word	0x080038b1
 8003860:	08003a37 	.word	0x08003a37
 8003864:	08003a37 	.word	0x08003a37
 8003868:	08003a37 	.word	0x08003a37
 800386c:	080038f1 	.word	0x080038f1
 8003870:	08003a37 	.word	0x08003a37
 8003874:	08003a37 	.word	0x08003a37
 8003878:	08003a37 	.word	0x08003a37
 800387c:	08003933 	.word	0x08003933
 8003880:	08003a37 	.word	0x08003a37
 8003884:	08003a37 	.word	0x08003a37
 8003888:	08003a37 	.word	0x08003a37
 800388c:	08003973 	.word	0x08003973
 8003890:	08003a37 	.word	0x08003a37
 8003894:	08003a37 	.word	0x08003a37
 8003898:	08003a37 	.word	0x08003a37
 800389c:	080039b5 	.word	0x080039b5
 80038a0:	08003a37 	.word	0x08003a37
 80038a4:	08003a37 	.word	0x08003a37
 80038a8:	08003a37 	.word	0x08003a37
 80038ac:	080039f5 	.word	0x080039f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fa58 	bl	8003d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0208 	orr.w	r2, r2, #8
 80038ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0204 	bic.w	r2, r2, #4
 80038da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6999      	ldr	r1, [r3, #24]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	619a      	str	r2, [r3, #24]
      break;
 80038ee:	e0a3      	b.n	8003a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 faaa 	bl	8003e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699a      	ldr	r2, [r3, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800390a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800391a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6999      	ldr	r1, [r3, #24]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	021a      	lsls	r2, r3, #8
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	619a      	str	r2, [r3, #24]
      break;
 8003930:	e082      	b.n	8003a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fb01 	bl	8003f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0208 	orr.w	r2, r2, #8
 800394c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0204 	bic.w	r2, r2, #4
 800395c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69d9      	ldr	r1, [r3, #28]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	61da      	str	r2, [r3, #28]
      break;
 8003970:	e062      	b.n	8003a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fb57 	bl	800402c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69da      	ldr	r2, [r3, #28]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800398c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69da      	ldr	r2, [r3, #28]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69d9      	ldr	r1, [r3, #28]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	021a      	lsls	r2, r3, #8
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	61da      	str	r2, [r3, #28]
      break;
 80039b2:	e041      	b.n	8003a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fb8e 	bl	80040dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0208 	orr.w	r2, r2, #8
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0204 	bic.w	r2, r2, #4
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039f2:	e021      	b.n	8003a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fbc0 	bl	8004180 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	021a      	lsls	r2, r3, #8
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a34:	e000      	b.n	8003a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003a36:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop

08003a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_TIM_ConfigClockSource+0x18>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e0a6      	b.n	8003bba <HAL_TIM_ConfigClockSource+0x166>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <HAL_TIM_ConfigClockSource+0x170>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d067      	beq.n	8003b74 <HAL_TIM_ConfigClockSource+0x120>
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	d80b      	bhi.n	8003ac0 <HAL_TIM_ConfigClockSource+0x6c>
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d073      	beq.n	8003b94 <HAL_TIM_ConfigClockSource+0x140>
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d802      	bhi.n	8003ab6 <HAL_TIM_ConfigClockSource+0x62>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d06f      	beq.n	8003b94 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ab4:	e078      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d06c      	beq.n	8003b94 <HAL_TIM_ConfigClockSource+0x140>
 8003aba:	2b30      	cmp	r3, #48	; 0x30
 8003abc:	d06a      	beq.n	8003b94 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003abe:	e073      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ac0:	2b70      	cmp	r3, #112	; 0x70
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_TIM_ConfigClockSource+0x8c>
 8003ac4:	2b70      	cmp	r3, #112	; 0x70
 8003ac6:	d804      	bhi.n	8003ad2 <HAL_TIM_ConfigClockSource+0x7e>
 8003ac8:	2b50      	cmp	r3, #80	; 0x50
 8003aca:	d033      	beq.n	8003b34 <HAL_TIM_ConfigClockSource+0xe0>
 8003acc:	2b60      	cmp	r3, #96	; 0x60
 8003ace:	d041      	beq.n	8003b54 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ad0:	e06a      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad6:	d066      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x152>
 8003ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003adc:	d017      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003ade:	e063      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	6899      	ldr	r1, [r3, #8]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f000 fc14 	bl	800431c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	609a      	str	r2, [r3, #8]
      break;
 8003b0c:	e04c      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6899      	ldr	r1, [r3, #8]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f000 fbfd 	bl	800431c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b30:	609a      	str	r2, [r3, #8]
      break;
 8003b32:	e039      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	461a      	mov	r2, r3
 8003b42:	f000 fb71 	bl	8004228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2150      	movs	r1, #80	; 0x50
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fbca 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 8003b52:	e029      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	461a      	mov	r2, r3
 8003b62:	f000 fb90 	bl	8004286 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2160      	movs	r1, #96	; 0x60
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fbba 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 8003b72:	e019      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	461a      	mov	r2, r3
 8003b82:	f000 fb51 	bl	8004228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2140      	movs	r1, #64	; 0x40
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fbaa 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 8003b92:	e009      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	f000 fba1 	bl	80042e6 <TIM_ITRx_SetConfig>
      break;
 8003ba4:	e000      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	fffeff88 	.word	0xfffeff88

08003bc8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a40      	ldr	r2, [pc, #256]	; (8003d40 <TIM_Base_SetConfig+0x114>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4a:	d00f      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a3d      	ldr	r2, [pc, #244]	; (8003d44 <TIM_Base_SetConfig+0x118>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a3c      	ldr	r2, [pc, #240]	; (8003d48 <TIM_Base_SetConfig+0x11c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d007      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a3b      	ldr	r2, [pc, #236]	; (8003d4c <TIM_Base_SetConfig+0x120>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a3a      	ldr	r2, [pc, #232]	; (8003d50 <TIM_Base_SetConfig+0x124>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d108      	bne.n	8003c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a2f      	ldr	r2, [pc, #188]	; (8003d40 <TIM_Base_SetConfig+0x114>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d02b      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8c:	d027      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2c      	ldr	r2, [pc, #176]	; (8003d44 <TIM_Base_SetConfig+0x118>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d023      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2b      	ldr	r2, [pc, #172]	; (8003d48 <TIM_Base_SetConfig+0x11c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01f      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2a      	ldr	r2, [pc, #168]	; (8003d4c <TIM_Base_SetConfig+0x120>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01b      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a29      	ldr	r2, [pc, #164]	; (8003d50 <TIM_Base_SetConfig+0x124>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d017      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a28      	ldr	r2, [pc, #160]	; (8003d54 <TIM_Base_SetConfig+0x128>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a27      	ldr	r2, [pc, #156]	; (8003d58 <TIM_Base_SetConfig+0x12c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00f      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <TIM_Base_SetConfig+0x130>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00b      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a25      	ldr	r2, [pc, #148]	; (8003d60 <TIM_Base_SetConfig+0x134>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a24      	ldr	r2, [pc, #144]	; (8003d64 <TIM_Base_SetConfig+0x138>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a23      	ldr	r2, [pc, #140]	; (8003d68 <TIM_Base_SetConfig+0x13c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <TIM_Base_SetConfig+0x114>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <TIM_Base_SetConfig+0x124>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d103      	bne.n	8003d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	615a      	str	r2, [r3, #20]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40010000 	.word	0x40010000
 8003d44:	40000400 	.word	0x40000400
 8003d48:	40000800 	.word	0x40000800
 8003d4c:	40000c00 	.word	0x40000c00
 8003d50:	40010400 	.word	0x40010400
 8003d54:	40014000 	.word	0x40014000
 8003d58:	40014400 	.word	0x40014400
 8003d5c:	40014800 	.word	0x40014800
 8003d60:	40001800 	.word	0x40001800
 8003d64:	40001c00 	.word	0x40001c00
 8003d68:	40002000 	.word	0x40002000

08003d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 0201 	bic.w	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4b2b      	ldr	r3, [pc, #172]	; (8003e44 <TIM_OC1_SetConfig+0xd8>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 0302 	bic.w	r3, r3, #2
 8003db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <TIM_OC1_SetConfig+0xdc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_OC1_SetConfig+0x64>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a20      	ldr	r2, [pc, #128]	; (8003e4c <TIM_OC1_SetConfig+0xe0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10c      	bne.n	8003dea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0308 	bic.w	r3, r3, #8
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f023 0304 	bic.w	r3, r3, #4
 8003de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <TIM_OC1_SetConfig+0xdc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_OC1_SetConfig+0x8e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <TIM_OC1_SetConfig+0xe0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d111      	bne.n	8003e1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	621a      	str	r2, [r3, #32]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	fffeff8f 	.word	0xfffeff8f
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40010400 	.word	0x40010400

08003e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f023 0210 	bic.w	r2, r3, #16
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4b2e      	ldr	r3, [pc, #184]	; (8003f34 <TIM_OC2_SetConfig+0xe4>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 0320 	bic.w	r3, r3, #32
 8003e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a23      	ldr	r2, [pc, #140]	; (8003f38 <TIM_OC2_SetConfig+0xe8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_OC2_SetConfig+0x68>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <TIM_OC2_SetConfig+0xec>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d10d      	bne.n	8003ed4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <TIM_OC2_SetConfig+0xe8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <TIM_OC2_SetConfig+0x94>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a17      	ldr	r2, [pc, #92]	; (8003f3c <TIM_OC2_SetConfig+0xec>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d113      	bne.n	8003f0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	621a      	str	r2, [r3, #32]
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	feff8fff 	.word	0xfeff8fff
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40010400 	.word	0x40010400

08003f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4b2d      	ldr	r3, [pc, #180]	; (8004020 <TIM_OC3_SetConfig+0xe0>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0303 	bic.w	r3, r3, #3
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a22      	ldr	r2, [pc, #136]	; (8004024 <TIM_OC3_SetConfig+0xe4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d003      	beq.n	8003fa6 <TIM_OC3_SetConfig+0x66>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a21      	ldr	r2, [pc, #132]	; (8004028 <TIM_OC3_SetConfig+0xe8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d10d      	bne.n	8003fc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a17      	ldr	r2, [pc, #92]	; (8004024 <TIM_OC3_SetConfig+0xe4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d003      	beq.n	8003fd2 <TIM_OC3_SetConfig+0x92>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a16      	ldr	r2, [pc, #88]	; (8004028 <TIM_OC3_SetConfig+0xe8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d113      	bne.n	8003ffa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	621a      	str	r2, [r3, #32]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	fffeff8f 	.word	0xfffeff8f
 8004024:	40010000 	.word	0x40010000
 8004028:	40010400 	.word	0x40010400

0800402c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <TIM_OC4_SetConfig+0xa4>)
 8004058:	4013      	ands	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	031b      	lsls	r3, r3, #12
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <TIM_OC4_SetConfig+0xa8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_OC4_SetConfig+0x68>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a12      	ldr	r2, [pc, #72]	; (80040d8 <TIM_OC4_SetConfig+0xac>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d109      	bne.n	80040a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800409a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	019b      	lsls	r3, r3, #6
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	621a      	str	r2, [r3, #32]
}
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	feff8fff 	.word	0xfeff8fff
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40010400 	.word	0x40010400

080040dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <TIM_OC5_SetConfig+0x98>)
 8004108:	4013      	ands	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800411c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a12      	ldr	r2, [pc, #72]	; (8004178 <TIM_OC5_SetConfig+0x9c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <TIM_OC5_SetConfig+0x5e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a11      	ldr	r2, [pc, #68]	; (800417c <TIM_OC5_SetConfig+0xa0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d109      	bne.n	800414e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004140:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	621a      	str	r2, [r3, #32]
}
 8004168:	bf00      	nop
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	fffeff8f 	.word	0xfffeff8f
 8004178:	40010000 	.word	0x40010000
 800417c:	40010400 	.word	0x40010400

08004180 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4b1c      	ldr	r3, [pc, #112]	; (800421c <TIM_OC6_SetConfig+0x9c>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	051b      	lsls	r3, r3, #20
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a13      	ldr	r2, [pc, #76]	; (8004220 <TIM_OC6_SetConfig+0xa0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d003      	beq.n	80041e0 <TIM_OC6_SetConfig+0x60>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a12      	ldr	r2, [pc, #72]	; (8004224 <TIM_OC6_SetConfig+0xa4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d109      	bne.n	80041f4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	029b      	lsls	r3, r3, #10
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	feff8fff 	.word	0xfeff8fff
 8004220:	40010000 	.word	0x40010000
 8004224:	40010400 	.word	0x40010400

08004228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f023 0201 	bic.w	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f023 030a 	bic.w	r3, r3, #10
 8004264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004286:	b480      	push	{r7}
 8004288:	b087      	sub	sp, #28
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	f023 0210 	bic.w	r2, r3, #16
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	031b      	lsls	r3, r3, #12
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	f043 0307 	orr.w	r3, r3, #7
 8004308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	609a      	str	r2, [r3, #8]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	021a      	lsls	r2, r3, #8
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	431a      	orrs	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4313      	orrs	r3, r2
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	609a      	str	r2, [r3, #8]
}
 8004350:	bf00      	nop
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	2201      	movs	r2, #1
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1a      	ldr	r2, [r3, #32]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	43db      	mvns	r3, r3
 800437e:	401a      	ands	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a1a      	ldr	r2, [r3, #32]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	431a      	orrs	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043bc:	2302      	movs	r3, #2
 80043be:	e045      	b.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1c      	ldr	r2, [pc, #112]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1b      	ldr	r2, [pc, #108]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d108      	bne.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800441e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	4313      	orrs	r3, r2
 8004428:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40010000 	.word	0x40010000
 800445c:	40010400 	.word	0x40010400

08004460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e040      	b.n	8004530 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fd f988 	bl	80017d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2224      	movs	r2, #36	; 0x24
 80044c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0201 	bic.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fa5a 	bl	8004994 <UART_SetConfig>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e022      	b.n	8004530 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fcf2 	bl	8004edc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004516:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fd79 	bl	8005020 <UART_CheckIdleState>
 800452e:	4603      	mov	r3, r0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	4613      	mov	r3, r2
 8004544:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454a:	2b20      	cmp	r3, #32
 800454c:	d144      	bne.n	80045d8 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_UART_Transmit_IT+0x22>
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e03d      	b.n	80045da <HAL_UART_Transmit_IT+0xa2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_UART_Transmit_IT+0x34>
 8004568:	2302      	movs	r3, #2
 800456a:	e036      	b.n	80045da <HAL_UART_Transmit_IT+0xa2>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	88fa      	ldrh	r2, [r7, #6]
 800457e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	88fa      	ldrh	r2, [r7, #6]
 8004586:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2221      	movs	r2, #33	; 0x21
 800459a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a4:	d107      	bne.n	80045b6 <HAL_UART_Transmit_IT+0x7e>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d103      	bne.n	80045b6 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a0d      	ldr	r2, [pc, #52]	; (80045e8 <HAL_UART_Transmit_IT+0xb0>)
 80045b2:	665a      	str	r2, [r3, #100]	; 0x64
 80045b4:	e002      	b.n	80045bc <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a0c      	ldr	r2, [pc, #48]	; (80045ec <HAL_UART_Transmit_IT+0xb4>)
 80045ba:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045d2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	080051ed 	.word	0x080051ed
 80045ec:	0800517b 	.word	0x0800517b

080045f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	4613      	mov	r3, r2
 80045fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004602:	2b20      	cmp	r3, #32
 8004604:	f040 808a 	bne.w	800471c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_UART_Receive_IT+0x24>
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e082      	b.n	800471e <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_UART_Receive_IT+0x36>
 8004622:	2302      	movs	r3, #2
 8004624:	e07b      	b.n	800471e <HAL_UART_Receive_IT+0x12e>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	88fa      	ldrh	r2, [r7, #6]
 8004640:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004652:	d10e      	bne.n	8004672 <HAL_UART_Receive_IT+0x82>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <HAL_UART_Receive_IT+0x78>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004662:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004666:	e02d      	b.n	80046c4 <HAL_UART_Receive_IT+0xd4>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	22ff      	movs	r2, #255	; 0xff
 800466c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004670:	e028      	b.n	80046c4 <HAL_UART_Receive_IT+0xd4>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10d      	bne.n	8004696 <HAL_UART_Receive_IT+0xa6>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d104      	bne.n	800468c <HAL_UART_Receive_IT+0x9c>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	22ff      	movs	r2, #255	; 0xff
 8004686:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800468a:	e01b      	b.n	80046c4 <HAL_UART_Receive_IT+0xd4>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	227f      	movs	r2, #127	; 0x7f
 8004690:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004694:	e016      	b.n	80046c4 <HAL_UART_Receive_IT+0xd4>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800469e:	d10d      	bne.n	80046bc <HAL_UART_Receive_IT+0xcc>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d104      	bne.n	80046b2 <HAL_UART_Receive_IT+0xc2>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	227f      	movs	r2, #127	; 0x7f
 80046ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b0:	e008      	b.n	80046c4 <HAL_UART_Receive_IT+0xd4>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	223f      	movs	r2, #63	; 0x3f
 80046b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046ba:	e003      	b.n	80046c4 <HAL_UART_Receive_IT+0xd4>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2222      	movs	r2, #34	; 0x22
 80046ce:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e8:	d107      	bne.n	80046fa <HAL_UART_Receive_IT+0x10a>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d103      	bne.n	80046fa <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4a0d      	ldr	r2, [pc, #52]	; (800472c <HAL_UART_Receive_IT+0x13c>)
 80046f6:	661a      	str	r2, [r3, #96]	; 0x60
 80046f8:	e002      	b.n	8004700 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <HAL_UART_Receive_IT+0x140>)
 80046fe:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004716:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	e000      	b.n	800471e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800471c:	2302      	movs	r3, #2
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	08005341 	.word	0x08005341
 8004730:	0800529b 	.word	0x0800529b

08004734 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d113      	bne.n	800478a <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00e      	beq.n	800478a <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80eb 	beq.w	8004956 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
      }
      return;
 8004788:	e0e5      	b.n	8004956 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80c0 	beq.w	8004912 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80b5 	beq.w	8004912 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00e      	beq.n	80047d0 <HAL_UART_IRQHandler+0x9c>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d009      	beq.n	80047d0 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2201      	movs	r2, #1
 80047c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c8:	f043 0201 	orr.w	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00e      	beq.n	80047f8 <HAL_UART_IRQHandler+0xc4>
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d009      	beq.n	80047f8 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2202      	movs	r2, #2
 80047ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f0:	f043 0204 	orr.w	r2, r3, #4
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00e      	beq.n	8004820 <HAL_UART_IRQHandler+0xec>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d009      	beq.n	8004820 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2204      	movs	r2, #4
 8004812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004818:	f043 0202 	orr.w	r2, r3, #2
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d013      	beq.n	8004852 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2208      	movs	r2, #8
 8004844:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800484a:	f043 0208 	orr.w	r2, r3, #8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004856:	2b00      	cmp	r3, #0
 8004858:	d07f      	beq.n	800495a <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00c      	beq.n	800487e <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004882:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d004      	beq.n	800489c <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004898:	2b00      	cmp	r3, #0
 800489a:	d031      	beq.n	8004900 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fc36 	bl	800510e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d123      	bne.n	80048f8 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048be:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d013      	beq.n	80048f0 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048cc:	4a26      	ldr	r2, [pc, #152]	; (8004968 <HAL_UART_IRQHandler+0x234>)
 80048ce:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fd fa0c 	bl	8001cf2 <HAL_DMA_Abort_IT>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d016      	beq.n	800490e <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80048ea:	4610      	mov	r0, r2
 80048ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ee:	e00e      	b.n	800490e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f845 	bl	8004980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f6:	e00a      	b.n	800490e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f841 	bl	8004980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048fe:	e006      	b.n	800490e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f83d 	bl	8004980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800490c:	e025      	b.n	800495a <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490e:	bf00      	nop
    return;
 8004910:	e023      	b.n	800495a <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00d      	beq.n	8004938 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800492a:	2b00      	cmp	r3, #0
 800492c:	d017      	beq.n	800495e <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
    }
    return;
 8004936:	e012      	b.n	800495e <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00e      	beq.n	8004960 <HAL_UART_IRQHandler+0x22c>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d009      	beq.n	8004960 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fc8b 	bl	8005268 <UART_EndTransmit_IT>
    return;
 8004952:	bf00      	nop
 8004954:	e004      	b.n	8004960 <HAL_UART_IRQHandler+0x22c>
      return;
 8004956:	bf00      	nop
 8004958:	e002      	b.n	8004960 <HAL_UART_IRQHandler+0x22c>
    return;
 800495a:	bf00      	nop
 800495c:	e000      	b.n	8004960 <HAL_UART_IRQHandler+0x22c>
    return;
 800495e:	bf00      	nop
  }

}
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	0800514f 	.word	0x0800514f

0800496c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800499c:	2300      	movs	r3, #0
 800499e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	4bb1      	ldr	r3, [pc, #708]	; (8004c88 <UART_SetConfig+0x2f4>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	6939      	ldr	r1, [r7, #16]
 80049cc:	430b      	orrs	r3, r1
 80049ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a9f      	ldr	r2, [pc, #636]	; (8004c8c <UART_SetConfig+0x2f8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d121      	bne.n	8004a58 <UART_SetConfig+0xc4>
 8004a14:	4b9e      	ldr	r3, [pc, #632]	; (8004c90 <UART_SetConfig+0x2fc>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d816      	bhi.n	8004a50 <UART_SetConfig+0xbc>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <UART_SetConfig+0x94>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004a45 	.word	0x08004a45
 8004a30:	08004a3f 	.word	0x08004a3f
 8004a34:	08004a4b 	.word	0x08004a4b
 8004a38:	2301      	movs	r3, #1
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e151      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	77fb      	strb	r3, [r7, #31]
 8004a42:	e14e      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004a44:	2304      	movs	r3, #4
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e14b      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	77fb      	strb	r3, [r7, #31]
 8004a4e:	e148      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004a50:	2310      	movs	r3, #16
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	bf00      	nop
 8004a56:	e144      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a8d      	ldr	r2, [pc, #564]	; (8004c94 <UART_SetConfig+0x300>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d134      	bne.n	8004acc <UART_SetConfig+0x138>
 8004a62:	4b8b      	ldr	r3, [pc, #556]	; (8004c90 <UART_SetConfig+0x2fc>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f003 030c 	and.w	r3, r3, #12
 8004a6c:	2b0c      	cmp	r3, #12
 8004a6e:	d829      	bhi.n	8004ac4 <UART_SetConfig+0x130>
 8004a70:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <UART_SetConfig+0xe4>)
 8004a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a76:	bf00      	nop
 8004a78:	08004aad 	.word	0x08004aad
 8004a7c:	08004ac5 	.word	0x08004ac5
 8004a80:	08004ac5 	.word	0x08004ac5
 8004a84:	08004ac5 	.word	0x08004ac5
 8004a88:	08004ab9 	.word	0x08004ab9
 8004a8c:	08004ac5 	.word	0x08004ac5
 8004a90:	08004ac5 	.word	0x08004ac5
 8004a94:	08004ac5 	.word	0x08004ac5
 8004a98:	08004ab3 	.word	0x08004ab3
 8004a9c:	08004ac5 	.word	0x08004ac5
 8004aa0:	08004ac5 	.word	0x08004ac5
 8004aa4:	08004ac5 	.word	0x08004ac5
 8004aa8:	08004abf 	.word	0x08004abf
 8004aac:	2300      	movs	r3, #0
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e117      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e114      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004ab8:	2304      	movs	r3, #4
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e111      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004abe:	2308      	movs	r3, #8
 8004ac0:	77fb      	strb	r3, [r7, #31]
 8004ac2:	e10e      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	bf00      	nop
 8004aca:	e10a      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a71      	ldr	r2, [pc, #452]	; (8004c98 <UART_SetConfig+0x304>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d120      	bne.n	8004b18 <UART_SetConfig+0x184>
 8004ad6:	4b6e      	ldr	r3, [pc, #440]	; (8004c90 <UART_SetConfig+0x2fc>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d00f      	beq.n	8004b04 <UART_SetConfig+0x170>
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d802      	bhi.n	8004aee <UART_SetConfig+0x15a>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <UART_SetConfig+0x164>
 8004aec:	e010      	b.n	8004b10 <UART_SetConfig+0x17c>
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d005      	beq.n	8004afe <UART_SetConfig+0x16a>
 8004af2:	2b30      	cmp	r3, #48	; 0x30
 8004af4:	d009      	beq.n	8004b0a <UART_SetConfig+0x176>
 8004af6:	e00b      	b.n	8004b10 <UART_SetConfig+0x17c>
 8004af8:	2300      	movs	r3, #0
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	e0f1      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004afe:	2302      	movs	r3, #2
 8004b00:	77fb      	strb	r3, [r7, #31]
 8004b02:	e0ee      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004b04:	2304      	movs	r3, #4
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	e0eb      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	77fb      	strb	r3, [r7, #31]
 8004b0e:	e0e8      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004b10:	2310      	movs	r3, #16
 8004b12:	77fb      	strb	r3, [r7, #31]
 8004b14:	bf00      	nop
 8004b16:	e0e4      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a5f      	ldr	r2, [pc, #380]	; (8004c9c <UART_SetConfig+0x308>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d120      	bne.n	8004b64 <UART_SetConfig+0x1d0>
 8004b22:	4b5b      	ldr	r3, [pc, #364]	; (8004c90 <UART_SetConfig+0x2fc>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d00f      	beq.n	8004b50 <UART_SetConfig+0x1bc>
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d802      	bhi.n	8004b3a <UART_SetConfig+0x1a6>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <UART_SetConfig+0x1b0>
 8004b38:	e010      	b.n	8004b5c <UART_SetConfig+0x1c8>
 8004b3a:	2b80      	cmp	r3, #128	; 0x80
 8004b3c:	d005      	beq.n	8004b4a <UART_SetConfig+0x1b6>
 8004b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b40:	d009      	beq.n	8004b56 <UART_SetConfig+0x1c2>
 8004b42:	e00b      	b.n	8004b5c <UART_SetConfig+0x1c8>
 8004b44:	2300      	movs	r3, #0
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e0cb      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e0c8      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004b50:	2304      	movs	r3, #4
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e0c5      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004b56:	2308      	movs	r3, #8
 8004b58:	77fb      	strb	r3, [r7, #31]
 8004b5a:	e0c2      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004b5c:	2310      	movs	r3, #16
 8004b5e:	77fb      	strb	r3, [r7, #31]
 8004b60:	bf00      	nop
 8004b62:	e0be      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a4d      	ldr	r2, [pc, #308]	; (8004ca0 <UART_SetConfig+0x30c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d124      	bne.n	8004bb8 <UART_SetConfig+0x224>
 8004b6e:	4b48      	ldr	r3, [pc, #288]	; (8004c90 <UART_SetConfig+0x2fc>)
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7c:	d012      	beq.n	8004ba4 <UART_SetConfig+0x210>
 8004b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b82:	d802      	bhi.n	8004b8a <UART_SetConfig+0x1f6>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <UART_SetConfig+0x204>
 8004b88:	e012      	b.n	8004bb0 <UART_SetConfig+0x21c>
 8004b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b8e:	d006      	beq.n	8004b9e <UART_SetConfig+0x20a>
 8004b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b94:	d009      	beq.n	8004baa <UART_SetConfig+0x216>
 8004b96:	e00b      	b.n	8004bb0 <UART_SetConfig+0x21c>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e0a1      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e09e      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e09b      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004baa:	2308      	movs	r3, #8
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e098      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	bf00      	nop
 8004bb6:	e094      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a39      	ldr	r2, [pc, #228]	; (8004ca4 <UART_SetConfig+0x310>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d124      	bne.n	8004c0c <UART_SetConfig+0x278>
 8004bc2:	4b33      	ldr	r3, [pc, #204]	; (8004c90 <UART_SetConfig+0x2fc>)
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd0:	d012      	beq.n	8004bf8 <UART_SetConfig+0x264>
 8004bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd6:	d802      	bhi.n	8004bde <UART_SetConfig+0x24a>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <UART_SetConfig+0x258>
 8004bdc:	e012      	b.n	8004c04 <UART_SetConfig+0x270>
 8004bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be2:	d006      	beq.n	8004bf2 <UART_SetConfig+0x25e>
 8004be4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004be8:	d009      	beq.n	8004bfe <UART_SetConfig+0x26a>
 8004bea:	e00b      	b.n	8004c04 <UART_SetConfig+0x270>
 8004bec:	2301      	movs	r3, #1
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e077      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e074      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e071      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004bfe:	2308      	movs	r3, #8
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e06e      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004c04:	2310      	movs	r3, #16
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	bf00      	nop
 8004c0a:	e06a      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <UART_SetConfig+0x314>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d124      	bne.n	8004c60 <UART_SetConfig+0x2cc>
 8004c16:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <UART_SetConfig+0x2fc>)
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c24:	d012      	beq.n	8004c4c <UART_SetConfig+0x2b8>
 8004c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2a:	d802      	bhi.n	8004c32 <UART_SetConfig+0x29e>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d007      	beq.n	8004c40 <UART_SetConfig+0x2ac>
 8004c30:	e012      	b.n	8004c58 <UART_SetConfig+0x2c4>
 8004c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c36:	d006      	beq.n	8004c46 <UART_SetConfig+0x2b2>
 8004c38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c3c:	d009      	beq.n	8004c52 <UART_SetConfig+0x2be>
 8004c3e:	e00b      	b.n	8004c58 <UART_SetConfig+0x2c4>
 8004c40:	2300      	movs	r3, #0
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e04d      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004c46:	2302      	movs	r3, #2
 8004c48:	77fb      	strb	r3, [r7, #31]
 8004c4a:	e04a      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e047      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004c52:	2308      	movs	r3, #8
 8004c54:	77fb      	strb	r3, [r7, #31]
 8004c56:	e044      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004c58:	2310      	movs	r3, #16
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	bf00      	nop
 8004c5e:	e040      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <UART_SetConfig+0x318>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d139      	bne.n	8004cde <UART_SetConfig+0x34a>
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <UART_SetConfig+0x2fc>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c78:	d027      	beq.n	8004cca <UART_SetConfig+0x336>
 8004c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c7e:	d817      	bhi.n	8004cb0 <UART_SetConfig+0x31c>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01c      	beq.n	8004cbe <UART_SetConfig+0x32a>
 8004c84:	e027      	b.n	8004cd6 <UART_SetConfig+0x342>
 8004c86:	bf00      	nop
 8004c88:	efff69f3 	.word	0xefff69f3
 8004c8c:	40011000 	.word	0x40011000
 8004c90:	40023800 	.word	0x40023800
 8004c94:	40004400 	.word	0x40004400
 8004c98:	40004800 	.word	0x40004800
 8004c9c:	40004c00 	.word	0x40004c00
 8004ca0:	40005000 	.word	0x40005000
 8004ca4:	40011400 	.word	0x40011400
 8004ca8:	40007800 	.word	0x40007800
 8004cac:	40007c00 	.word	0x40007c00
 8004cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb4:	d006      	beq.n	8004cc4 <UART_SetConfig+0x330>
 8004cb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cba:	d009      	beq.n	8004cd0 <UART_SetConfig+0x33c>
 8004cbc:	e00b      	b.n	8004cd6 <UART_SetConfig+0x342>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e00e      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e00b      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004cca:	2304      	movs	r3, #4
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e008      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e005      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004cd6:	2310      	movs	r3, #16
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	bf00      	nop
 8004cdc:	e001      	b.n	8004ce2 <UART_SetConfig+0x34e>
 8004cde:	2310      	movs	r3, #16
 8004ce0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cea:	d17c      	bne.n	8004de6 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004cec:	7ffb      	ldrb	r3, [r7, #31]
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d859      	bhi.n	8004da6 <UART_SetConfig+0x412>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0x364>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d1d 	.word	0x08004d1d
 8004cfc:	08004d3b 	.word	0x08004d3b
 8004d00:	08004d59 	.word	0x08004d59
 8004d04:	08004da7 	.word	0x08004da7
 8004d08:	08004d71 	.word	0x08004d71
 8004d0c:	08004da7 	.word	0x08004da7
 8004d10:	08004da7 	.word	0x08004da7
 8004d14:	08004da7 	.word	0x08004da7
 8004d18:	08004d8f 	.word	0x08004d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004d1c:	f7fd ff7c 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8004d20:	4603      	mov	r3, r0
 8004d22:	005a      	lsls	r2, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	085b      	lsrs	r3, r3, #1
 8004d2a:	441a      	add	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	61bb      	str	r3, [r7, #24]
        break;
 8004d38:	e038      	b.n	8004dac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004d3a:	f7fd ff81 	bl	8002c40 <HAL_RCC_GetPCLK2Freq>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	005a      	lsls	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	085b      	lsrs	r3, r3, #1
 8004d48:	441a      	add	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	61bb      	str	r3, [r7, #24]
        break;
 8004d56:	e029      	b.n	8004dac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	085a      	lsrs	r2, r3, #1
 8004d5e:	4b5d      	ldr	r3, [pc, #372]	; (8004ed4 <UART_SetConfig+0x540>)
 8004d60:	4413      	add	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6852      	ldr	r2, [r2, #4]
 8004d66:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	61bb      	str	r3, [r7, #24]
        break;
 8004d6e:	e01d      	b.n	8004dac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004d70:	f7fd fe6e 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8004d74:	4603      	mov	r3, r0
 8004d76:	005a      	lsls	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	441a      	add	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	61bb      	str	r3, [r7, #24]
        break;
 8004d8c:	e00e      	b.n	8004dac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	61bb      	str	r3, [r7, #24]
        break;
 8004da4:	e002      	b.n	8004dac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	75fb      	strb	r3, [r7, #23]
        break;
 8004daa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2b0f      	cmp	r3, #15
 8004db0:	d916      	bls.n	8004de0 <UART_SetConfig+0x44c>
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db8:	d212      	bcs.n	8004de0 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f023 030f 	bic.w	r3, r3, #15
 8004dc2:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	89fb      	ldrh	r3, [r7, #14]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	89fa      	ldrh	r2, [r7, #14]
 8004ddc:	60da      	str	r2, [r3, #12]
 8004dde:	e06e      	b.n	8004ebe <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	75fb      	strb	r3, [r7, #23]
 8004de4:	e06b      	b.n	8004ebe <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004de6:	7ffb      	ldrb	r3, [r7, #31]
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d857      	bhi.n	8004e9c <UART_SetConfig+0x508>
 8004dec:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <UART_SetConfig+0x460>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e19 	.word	0x08004e19
 8004df8:	08004e35 	.word	0x08004e35
 8004dfc:	08004e51 	.word	0x08004e51
 8004e00:	08004e9d 	.word	0x08004e9d
 8004e04:	08004e69 	.word	0x08004e69
 8004e08:	08004e9d 	.word	0x08004e9d
 8004e0c:	08004e9d 	.word	0x08004e9d
 8004e10:	08004e9d 	.word	0x08004e9d
 8004e14:	08004e85 	.word	0x08004e85
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004e18:	f7fd fefe 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	441a      	add	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	61bb      	str	r3, [r7, #24]
        break;
 8004e32:	e036      	b.n	8004ea2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004e34:	f7fd ff04 	bl	8002c40 <HAL_RCC_GetPCLK2Freq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	441a      	add	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	61bb      	str	r3, [r7, #24]
        break;
 8004e4e:	e028      	b.n	8004ea2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	085a      	lsrs	r2, r3, #1
 8004e56:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <UART_SetConfig+0x544>)
 8004e58:	4413      	add	r3, r2
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6852      	ldr	r2, [r2, #4]
 8004e5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	61bb      	str	r3, [r7, #24]
        break;
 8004e66:	e01c      	b.n	8004ea2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004e68:	f7fd fdf2 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	085b      	lsrs	r3, r3, #1
 8004e74:	441a      	add	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	61bb      	str	r3, [r7, #24]
        break;
 8004e82:	e00e      	b.n	8004ea2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	61bb      	str	r3, [r7, #24]
        break;
 8004e9a:	e002      	b.n	8004ea2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	75fb      	strb	r3, [r7, #23]
        break;
 8004ea0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b0f      	cmp	r3, #15
 8004ea6:	d908      	bls.n	8004eba <UART_SetConfig+0x526>
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eae:	d204      	bcs.n	8004eba <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	60da      	str	r2, [r3, #12]
 8004eb8:	e001      	b.n	8004ebe <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3720      	adds	r7, #32
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	01e84800 	.word	0x01e84800
 8004ed8:	00f42400 	.word	0x00f42400

08004edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01a      	beq.n	8004ff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fda:	d10a      	bne.n	8004ff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	605a      	str	r2, [r3, #4]
  }
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af02      	add	r7, sp, #8
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800502e:	f7fc fd21 	bl	8001a74 <HAL_GetTick>
 8005032:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b08      	cmp	r3, #8
 8005040:	d10e      	bne.n	8005060 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005042:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f814 	bl	800507e <UART_WaitOnFlagUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e00a      	b.n	8005076 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b084      	sub	sp, #16
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	4613      	mov	r3, r2
 800508c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508e:	e02a      	b.n	80050e6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d026      	beq.n	80050e6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005098:	f7fc fcec 	bl	8001a74 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d302      	bcc.n	80050ae <UART_WaitOnFlagUntilTimeout+0x30>
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d11b      	bne.n	80050e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e00f      	b.n	8005106 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4013      	ands	r3, r2
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	bf0c      	ite	eq
 80050f6:	2301      	moveq	r3, #1
 80050f8:	2300      	movne	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	429a      	cmp	r2, r3
 8005102:	d0c5      	beq.n	8005090 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005124:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0201 	bic.w	r2, r2, #1
 8005134:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f7ff fc07 	bl	8004980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005172:	bf00      	nop
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005186:	2b21      	cmp	r3, #33	; 0x21
 8005188:	d12a      	bne.n	80051e0 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d110      	bne.n	80051b8 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051a4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80051b6:	e013      	b.n	80051e0 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051bc:	781a      	ldrb	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f8:	2b21      	cmp	r3, #33	; 0x21
 80051fa:	d12f      	bne.n	800525c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d110      	bne.n	800522a <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005216:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005226:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005228:	e018      	b.n	800525c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800523e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005244:	1c9a      	adds	r2, r3, #2
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800527e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff fb6d 	bl	800496c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b084      	sub	sp, #16
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052a8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ae:	2b22      	cmp	r3, #34	; 0x22
 80052b0:	d13a      	bne.n	8005328 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052ba:	89bb      	ldrh	r3, [r7, #12]
 80052bc:	b2d9      	uxtb	r1, r3
 80052be:	89fb      	ldrh	r3, [r7, #14]
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	400a      	ands	r2, r1
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d121      	bne.n	8005338 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005302:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0201 	bic.w	r2, r2, #1
 8005312:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7fb fe29 	bl	8000f78 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005326:	e007      	b.n	8005338 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0208 	orr.w	r2, r2, #8
 8005336:	619a      	str	r2, [r3, #24]
}
 8005338:	bf00      	nop
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800534e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005354:	2b22      	cmp	r3, #34	; 0x22
 8005356:	d13a      	bne.n	80053ce <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005364:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005366:	89ba      	ldrh	r2, [r7, #12]
 8005368:	89fb      	ldrh	r3, [r7, #14]
 800536a:	4013      	ands	r3, r2
 800536c:	b29a      	uxth	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	1c9a      	adds	r2, r3, #2
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d121      	bne.n	80053de <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053a8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0201 	bic.w	r2, r2, #1
 80053b8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fb fdd6 	bl	8000f78 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053cc:	e007      	b.n	80053de <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0208 	orr.w	r2, r2, #8
 80053dc:	619a      	str	r2, [r3, #24]
}
 80053de:	bf00      	nop
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053e8:	b084      	sub	sp, #16
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	f107 001c 	add.w	r0, r7, #28
 80053f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d120      	bne.n	8005442 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	4b20      	ldr	r3, [pc, #128]	; (8005494 <USB_CoreInit+0xac>)
 8005412:	4013      	ands	r3, r2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d105      	bne.n	8005436 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa60 	bl	80058fc <USB_CoreReset>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	e010      	b.n	8005464 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fa54 	bl	80058fc <USB_CoreReset>
 8005454:	4603      	mov	r3, r0
 8005456:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10b      	bne.n	8005482 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f043 0206 	orr.w	r2, r3, #6
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f043 0220 	orr.w	r2, r3, #32
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005482:	7bfb      	ldrb	r3, [r7, #15]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800548e:	b004      	add	sp, #16
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	ffbdffbf 	.word	0xffbdffbf

08005498 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f023 0201 	bic.w	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	460b      	mov	r3, r1
 80054c4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d106      	bne.n	80054e6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	60da      	str	r2, [r3, #12]
 80054e4:	e00b      	b.n	80054fe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80054e6:	78fb      	ldrb	r3, [r7, #3]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d106      	bne.n	80054fa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60da      	str	r2, [r3, #12]
 80054f8:	e001      	b.n	80054fe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e003      	b.n	8005506 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80054fe:	2032      	movs	r0, #50	; 0x32
 8005500:	f7fc fac4 	bl	8001a8c <HAL_Delay>

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005510:	b084      	sub	sp, #16
 8005512:	b580      	push	{r7, lr}
 8005514:	b086      	sub	sp, #24
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800551e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	e009      	b.n	8005544 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	3340      	adds	r3, #64	; 0x40
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	2200      	movs	r2, #0
 800553c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	3301      	adds	r3, #1
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	2b0e      	cmp	r3, #14
 8005548:	d9f2      	bls.n	8005530 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800554a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554c:	2b00      	cmp	r3, #0
 800554e:	d112      	bne.n	8005576 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	e005      	b.n	8005582 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005588:	461a      	mov	r2, r3
 800558a:	2300      	movs	r3, #0
 800558c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005594:	4619      	mov	r1, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559c:	461a      	mov	r2, r3
 800559e:	680b      	ldr	r3, [r1, #0]
 80055a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d10c      	bne.n	80055c2 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d104      	bne.n	80055b8 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055ae:	2100      	movs	r1, #0
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f971 	bl	8005898 <USB_SetDevSpeed>
 80055b6:	e018      	b.n	80055ea <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055b8:	2101      	movs	r1, #1
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f96c 	bl	8005898 <USB_SetDevSpeed>
 80055c0:	e013      	b.n	80055ea <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d10c      	bne.n	80055e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d104      	bne.n	80055d8 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055ce:	2100      	movs	r1, #0
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f961 	bl	8005898 <USB_SetDevSpeed>
 80055d6:	e008      	b.n	80055ea <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055d8:	2101      	movs	r1, #1
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f95c 	bl	8005898 <USB_SetDevSpeed>
 80055e0:	e003      	b.n	80055ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055e2:	2103      	movs	r1, #3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f957 	bl	8005898 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055ea:	2110      	movs	r1, #16
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f90b 	bl	8005808 <USB_FlushTxFifo>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f929 	bl	8005854 <USB_FlushRxFifo>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005612:	461a      	mov	r2, r3
 8005614:	2300      	movs	r3, #0
 8005616:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	461a      	mov	r2, r3
 8005620:	2300      	movs	r3, #0
 8005622:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562a:	461a      	mov	r2, r3
 800562c:	2300      	movs	r3, #0
 800562e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005630:	2300      	movs	r3, #0
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	e043      	b.n	80056be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800564c:	d118      	bne.n	8005680 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	461a      	mov	r2, r3
 8005662:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	e013      	b.n	8005692 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005676:	461a      	mov	r2, r3
 8005678:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	e008      	b.n	8005692 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568c:	461a      	mov	r2, r3
 800568e:	2300      	movs	r3, #0
 8005690:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569e:	461a      	mov	r2, r3
 80056a0:	2300      	movs	r3, #0
 80056a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	461a      	mov	r2, r3
 80056b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	3301      	adds	r3, #1
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d3b7      	bcc.n	8005636 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	e043      	b.n	8005754 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e2:	d118      	bne.n	8005716 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	461a      	mov	r2, r3
 80056f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e013      	b.n	8005728 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	461a      	mov	r2, r3
 800570e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	e008      	b.n	8005728 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005722:	461a      	mov	r2, r3
 8005724:	2300      	movs	r3, #0
 8005726:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005734:	461a      	mov	r2, r3
 8005736:	2300      	movs	r3, #0
 8005738:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005746:	461a      	mov	r2, r3
 8005748:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800574c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	3301      	adds	r3, #1
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	429a      	cmp	r2, r3
 800575a:	d3b7      	bcc.n	80056cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800576a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800576e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	2b01      	cmp	r3, #1
 8005774:	d110      	bne.n	8005798 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577c:	461a      	mov	r2, r3
 800577e:	4b1e      	ldr	r3, [pc, #120]	; (80057f8 <USB_DevInit+0x2e8>)
 8005780:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005790:	4619      	mov	r1, r3
 8005792:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <USB_DevInit+0x2ec>)
 8005794:	4313      	orrs	r3, r2
 8005796:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	f043 0210 	orr.w	r2, r3, #16
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699a      	ldr	r2, [r3, #24]
 80057bc:	4b10      	ldr	r3, [pc, #64]	; (8005800 <USB_DevInit+0x2f0>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f043 0208 	orr.w	r2, r3, #8
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d105      	bne.n	80057e8 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699a      	ldr	r2, [r3, #24]
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <USB_DevInit+0x2f4>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057f4:	b004      	add	sp, #16
 80057f6:	4770      	bx	lr
 80057f8:	00800100 	.word	0x00800100
 80057fc:	00010003 	.word	0x00010003
 8005800:	803c3800 	.word	0x803c3800
 8005804:	40000004 	.word	0x40000004

08005808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	019b      	lsls	r3, r3, #6
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	3301      	adds	r3, #1
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4a09      	ldr	r2, [pc, #36]	; (8005850 <USB_FlushTxFifo+0x48>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d901      	bls.n	8005834 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e006      	b.n	8005842 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b20      	cmp	r3, #32
 800583e:	d0f0      	beq.n	8005822 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	00030d40 	.word	0x00030d40

08005854 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2210      	movs	r2, #16
 8005864:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4a09      	ldr	r2, [pc, #36]	; (8005894 <USB_FlushRxFifo+0x40>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e006      	b.n	8005886 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b10      	cmp	r3, #16
 8005882:	d0f0      	beq.n	8005866 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	00030d40 	.word	0x00030d40

08005898 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b8:	4313      	orrs	r3, r2
 80058ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e4:	f043 0302 	orr.w	r3, r3, #2
 80058e8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80058ea:	2003      	movs	r0, #3
 80058ec:	f7fc f8ce 	bl	8001a8c <HAL_Delay>

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3301      	adds	r3, #1
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4a13      	ldr	r2, [pc, #76]	; (8005960 <USB_CoreReset+0x64>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e01b      	b.n	8005952 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	daf2      	bge.n	8005908 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f043 0201 	orr.w	r2, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4a09      	ldr	r2, [pc, #36]	; (8005960 <USB_CoreReset+0x64>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e006      	b.n	8005952 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b01      	cmp	r3, #1
 800594e:	d0f0      	beq.n	8005932 <USB_CoreReset+0x36>

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	00030d40 	.word	0x00030d40

08005964 <atoi>:
 8005964:	220a      	movs	r2, #10
 8005966:	2100      	movs	r1, #0
 8005968:	f000 b8ce 	b.w	8005b08 <strtol>

0800596c <__errno>:
 800596c:	4b01      	ldr	r3, [pc, #4]	; (8005974 <__errno+0x8>)
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	2000000c 	.word	0x2000000c

08005978 <__libc_init_array>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	4e0d      	ldr	r6, [pc, #52]	; (80059b0 <__libc_init_array+0x38>)
 800597c:	4c0d      	ldr	r4, [pc, #52]	; (80059b4 <__libc_init_array+0x3c>)
 800597e:	1ba4      	subs	r4, r4, r6
 8005980:	10a4      	asrs	r4, r4, #2
 8005982:	2500      	movs	r5, #0
 8005984:	42a5      	cmp	r5, r4
 8005986:	d109      	bne.n	800599c <__libc_init_array+0x24>
 8005988:	4e0b      	ldr	r6, [pc, #44]	; (80059b8 <__libc_init_array+0x40>)
 800598a:	4c0c      	ldr	r4, [pc, #48]	; (80059bc <__libc_init_array+0x44>)
 800598c:	f000 fcdc 	bl	8006348 <_init>
 8005990:	1ba4      	subs	r4, r4, r6
 8005992:	10a4      	asrs	r4, r4, #2
 8005994:	2500      	movs	r5, #0
 8005996:	42a5      	cmp	r5, r4
 8005998:	d105      	bne.n	80059a6 <__libc_init_array+0x2e>
 800599a:	bd70      	pop	{r4, r5, r6, pc}
 800599c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059a0:	4798      	blx	r3
 80059a2:	3501      	adds	r5, #1
 80059a4:	e7ee      	b.n	8005984 <__libc_init_array+0xc>
 80059a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059aa:	4798      	blx	r3
 80059ac:	3501      	adds	r5, #1
 80059ae:	e7f2      	b.n	8005996 <__libc_init_array+0x1e>
 80059b0:	080064d8 	.word	0x080064d8
 80059b4:	080064d8 	.word	0x080064d8
 80059b8:	080064d8 	.word	0x080064d8
 80059bc:	080064dc 	.word	0x080064dc

080059c0 <memset>:
 80059c0:	4402      	add	r2, r0
 80059c2:	4603      	mov	r3, r0
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d100      	bne.n	80059ca <memset+0xa>
 80059c8:	4770      	bx	lr
 80059ca:	f803 1b01 	strb.w	r1, [r3], #1
 80059ce:	e7f9      	b.n	80059c4 <memset+0x4>

080059d0 <siprintf>:
 80059d0:	b40e      	push	{r1, r2, r3}
 80059d2:	b500      	push	{lr}
 80059d4:	b09c      	sub	sp, #112	; 0x70
 80059d6:	ab1d      	add	r3, sp, #116	; 0x74
 80059d8:	9002      	str	r0, [sp, #8]
 80059da:	9006      	str	r0, [sp, #24]
 80059dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059e0:	4809      	ldr	r0, [pc, #36]	; (8005a08 <siprintf+0x38>)
 80059e2:	9107      	str	r1, [sp, #28]
 80059e4:	9104      	str	r1, [sp, #16]
 80059e6:	4909      	ldr	r1, [pc, #36]	; (8005a0c <siprintf+0x3c>)
 80059e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ec:	9105      	str	r1, [sp, #20]
 80059ee:	6800      	ldr	r0, [r0, #0]
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	a902      	add	r1, sp, #8
 80059f4:	f000 f90e 	bl	8005c14 <_svfiprintf_r>
 80059f8:	9b02      	ldr	r3, [sp, #8]
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	b01c      	add	sp, #112	; 0x70
 8005a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a04:	b003      	add	sp, #12
 8005a06:	4770      	bx	lr
 8005a08:	2000000c 	.word	0x2000000c
 8005a0c:	ffff0208 	.word	0xffff0208

08005a10 <_strtol_l.isra.0>:
 8005a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a14:	4680      	mov	r8, r0
 8005a16:	4689      	mov	r9, r1
 8005a18:	4692      	mov	sl, r2
 8005a1a:	461e      	mov	r6, r3
 8005a1c:	460f      	mov	r7, r1
 8005a1e:	463d      	mov	r5, r7
 8005a20:	9808      	ldr	r0, [sp, #32]
 8005a22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a26:	f000 f885 	bl	8005b34 <__locale_ctype_ptr_l>
 8005a2a:	4420      	add	r0, r4
 8005a2c:	7843      	ldrb	r3, [r0, #1]
 8005a2e:	f013 0308 	ands.w	r3, r3, #8
 8005a32:	d132      	bne.n	8005a9a <_strtol_l.isra.0+0x8a>
 8005a34:	2c2d      	cmp	r4, #45	; 0x2d
 8005a36:	d132      	bne.n	8005a9e <_strtol_l.isra.0+0x8e>
 8005a38:	787c      	ldrb	r4, [r7, #1]
 8005a3a:	1cbd      	adds	r5, r7, #2
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	2e00      	cmp	r6, #0
 8005a40:	d05d      	beq.n	8005afe <_strtol_l.isra.0+0xee>
 8005a42:	2e10      	cmp	r6, #16
 8005a44:	d109      	bne.n	8005a5a <_strtol_l.isra.0+0x4a>
 8005a46:	2c30      	cmp	r4, #48	; 0x30
 8005a48:	d107      	bne.n	8005a5a <_strtol_l.isra.0+0x4a>
 8005a4a:	782b      	ldrb	r3, [r5, #0]
 8005a4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a50:	2b58      	cmp	r3, #88	; 0x58
 8005a52:	d14f      	bne.n	8005af4 <_strtol_l.isra.0+0xe4>
 8005a54:	786c      	ldrb	r4, [r5, #1]
 8005a56:	2610      	movs	r6, #16
 8005a58:	3502      	adds	r5, #2
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	bf14      	ite	ne
 8005a5e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005a62:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005a66:	2700      	movs	r7, #0
 8005a68:	fbb1 fcf6 	udiv	ip, r1, r6
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005a72:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005a76:	2b09      	cmp	r3, #9
 8005a78:	d817      	bhi.n	8005aaa <_strtol_l.isra.0+0x9a>
 8005a7a:	461c      	mov	r4, r3
 8005a7c:	42a6      	cmp	r6, r4
 8005a7e:	dd23      	ble.n	8005ac8 <_strtol_l.isra.0+0xb8>
 8005a80:	1c7b      	adds	r3, r7, #1
 8005a82:	d007      	beq.n	8005a94 <_strtol_l.isra.0+0x84>
 8005a84:	4584      	cmp	ip, r0
 8005a86:	d31c      	bcc.n	8005ac2 <_strtol_l.isra.0+0xb2>
 8005a88:	d101      	bne.n	8005a8e <_strtol_l.isra.0+0x7e>
 8005a8a:	45a6      	cmp	lr, r4
 8005a8c:	db19      	blt.n	8005ac2 <_strtol_l.isra.0+0xb2>
 8005a8e:	fb00 4006 	mla	r0, r0, r6, r4
 8005a92:	2701      	movs	r7, #1
 8005a94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a98:	e7eb      	b.n	8005a72 <_strtol_l.isra.0+0x62>
 8005a9a:	462f      	mov	r7, r5
 8005a9c:	e7bf      	b.n	8005a1e <_strtol_l.isra.0+0xe>
 8005a9e:	2c2b      	cmp	r4, #43	; 0x2b
 8005aa0:	bf04      	itt	eq
 8005aa2:	1cbd      	addeq	r5, r7, #2
 8005aa4:	787c      	ldrbeq	r4, [r7, #1]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	e7c9      	b.n	8005a3e <_strtol_l.isra.0+0x2e>
 8005aaa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005aae:	2b19      	cmp	r3, #25
 8005ab0:	d801      	bhi.n	8005ab6 <_strtol_l.isra.0+0xa6>
 8005ab2:	3c37      	subs	r4, #55	; 0x37
 8005ab4:	e7e2      	b.n	8005a7c <_strtol_l.isra.0+0x6c>
 8005ab6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005aba:	2b19      	cmp	r3, #25
 8005abc:	d804      	bhi.n	8005ac8 <_strtol_l.isra.0+0xb8>
 8005abe:	3c57      	subs	r4, #87	; 0x57
 8005ac0:	e7dc      	b.n	8005a7c <_strtol_l.isra.0+0x6c>
 8005ac2:	f04f 37ff 	mov.w	r7, #4294967295
 8005ac6:	e7e5      	b.n	8005a94 <_strtol_l.isra.0+0x84>
 8005ac8:	1c7b      	adds	r3, r7, #1
 8005aca:	d108      	bne.n	8005ade <_strtol_l.isra.0+0xce>
 8005acc:	2322      	movs	r3, #34	; 0x22
 8005ace:	f8c8 3000 	str.w	r3, [r8]
 8005ad2:	4608      	mov	r0, r1
 8005ad4:	f1ba 0f00 	cmp.w	sl, #0
 8005ad8:	d107      	bne.n	8005aea <_strtol_l.isra.0+0xda>
 8005ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ade:	b102      	cbz	r2, 8005ae2 <_strtol_l.isra.0+0xd2>
 8005ae0:	4240      	negs	r0, r0
 8005ae2:	f1ba 0f00 	cmp.w	sl, #0
 8005ae6:	d0f8      	beq.n	8005ada <_strtol_l.isra.0+0xca>
 8005ae8:	b10f      	cbz	r7, 8005aee <_strtol_l.isra.0+0xde>
 8005aea:	f105 39ff 	add.w	r9, r5, #4294967295
 8005aee:	f8ca 9000 	str.w	r9, [sl]
 8005af2:	e7f2      	b.n	8005ada <_strtol_l.isra.0+0xca>
 8005af4:	2430      	movs	r4, #48	; 0x30
 8005af6:	2e00      	cmp	r6, #0
 8005af8:	d1af      	bne.n	8005a5a <_strtol_l.isra.0+0x4a>
 8005afa:	2608      	movs	r6, #8
 8005afc:	e7ad      	b.n	8005a5a <_strtol_l.isra.0+0x4a>
 8005afe:	2c30      	cmp	r4, #48	; 0x30
 8005b00:	d0a3      	beq.n	8005a4a <_strtol_l.isra.0+0x3a>
 8005b02:	260a      	movs	r6, #10
 8005b04:	e7a9      	b.n	8005a5a <_strtol_l.isra.0+0x4a>
	...

08005b08 <strtol>:
 8005b08:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <strtol+0x24>)
 8005b0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b0c:	681c      	ldr	r4, [r3, #0]
 8005b0e:	4d08      	ldr	r5, [pc, #32]	; (8005b30 <strtol+0x28>)
 8005b10:	6a23      	ldr	r3, [r4, #32]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bf08      	it	eq
 8005b16:	462b      	moveq	r3, r5
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	460a      	mov	r2, r1
 8005b1e:	4601      	mov	r1, r0
 8005b20:	4620      	mov	r0, r4
 8005b22:	f7ff ff75 	bl	8005a10 <_strtol_l.isra.0>
 8005b26:	b003      	add	sp, #12
 8005b28:	bd30      	pop	{r4, r5, pc}
 8005b2a:	bf00      	nop
 8005b2c:	2000000c 	.word	0x2000000c
 8005b30:	20000070 	.word	0x20000070

08005b34 <__locale_ctype_ptr_l>:
 8005b34:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005b38:	4770      	bx	lr

08005b3a <__ascii_mbtowc>:
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	b901      	cbnz	r1, 8005b40 <__ascii_mbtowc+0x6>
 8005b3e:	a901      	add	r1, sp, #4
 8005b40:	b142      	cbz	r2, 8005b54 <__ascii_mbtowc+0x1a>
 8005b42:	b14b      	cbz	r3, 8005b58 <__ascii_mbtowc+0x1e>
 8005b44:	7813      	ldrb	r3, [r2, #0]
 8005b46:	600b      	str	r3, [r1, #0]
 8005b48:	7812      	ldrb	r2, [r2, #0]
 8005b4a:	1c10      	adds	r0, r2, #0
 8005b4c:	bf18      	it	ne
 8005b4e:	2001      	movne	r0, #1
 8005b50:	b002      	add	sp, #8
 8005b52:	4770      	bx	lr
 8005b54:	4610      	mov	r0, r2
 8005b56:	e7fb      	b.n	8005b50 <__ascii_mbtowc+0x16>
 8005b58:	f06f 0001 	mvn.w	r0, #1
 8005b5c:	e7f8      	b.n	8005b50 <__ascii_mbtowc+0x16>

08005b5e <__ssputs_r>:
 8005b5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b62:	688e      	ldr	r6, [r1, #8]
 8005b64:	429e      	cmp	r6, r3
 8005b66:	4682      	mov	sl, r0
 8005b68:	460c      	mov	r4, r1
 8005b6a:	4690      	mov	r8, r2
 8005b6c:	4699      	mov	r9, r3
 8005b6e:	d837      	bhi.n	8005be0 <__ssputs_r+0x82>
 8005b70:	898a      	ldrh	r2, [r1, #12]
 8005b72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b76:	d031      	beq.n	8005bdc <__ssputs_r+0x7e>
 8005b78:	6825      	ldr	r5, [r4, #0]
 8005b7a:	6909      	ldr	r1, [r1, #16]
 8005b7c:	1a6f      	subs	r7, r5, r1
 8005b7e:	6965      	ldr	r5, [r4, #20]
 8005b80:	2302      	movs	r3, #2
 8005b82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b86:	fb95 f5f3 	sdiv	r5, r5, r3
 8005b8a:	f109 0301 	add.w	r3, r9, #1
 8005b8e:	443b      	add	r3, r7
 8005b90:	429d      	cmp	r5, r3
 8005b92:	bf38      	it	cc
 8005b94:	461d      	movcc	r5, r3
 8005b96:	0553      	lsls	r3, r2, #21
 8005b98:	d530      	bpl.n	8005bfc <__ssputs_r+0x9e>
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	f000 fb3a 	bl	8006214 <_malloc_r>
 8005ba0:	4606      	mov	r6, r0
 8005ba2:	b950      	cbnz	r0, 8005bba <__ssputs_r+0x5c>
 8005ba4:	230c      	movs	r3, #12
 8005ba6:	f8ca 3000 	str.w	r3, [sl]
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bba:	463a      	mov	r2, r7
 8005bbc:	6921      	ldr	r1, [r4, #16]
 8005bbe:	f000 fab6 	bl	800612e <memcpy>
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	6126      	str	r6, [r4, #16]
 8005bd0:	6165      	str	r5, [r4, #20]
 8005bd2:	443e      	add	r6, r7
 8005bd4:	1bed      	subs	r5, r5, r7
 8005bd6:	6026      	str	r6, [r4, #0]
 8005bd8:	60a5      	str	r5, [r4, #8]
 8005bda:	464e      	mov	r6, r9
 8005bdc:	454e      	cmp	r6, r9
 8005bde:	d900      	bls.n	8005be2 <__ssputs_r+0x84>
 8005be0:	464e      	mov	r6, r9
 8005be2:	4632      	mov	r2, r6
 8005be4:	4641      	mov	r1, r8
 8005be6:	6820      	ldr	r0, [r4, #0]
 8005be8:	f000 faac 	bl	8006144 <memmove>
 8005bec:	68a3      	ldr	r3, [r4, #8]
 8005bee:	1b9b      	subs	r3, r3, r6
 8005bf0:	60a3      	str	r3, [r4, #8]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	441e      	add	r6, r3
 8005bf6:	6026      	str	r6, [r4, #0]
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e7dc      	b.n	8005bb6 <__ssputs_r+0x58>
 8005bfc:	462a      	mov	r2, r5
 8005bfe:	f000 fb63 	bl	80062c8 <_realloc_r>
 8005c02:	4606      	mov	r6, r0
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d1e2      	bne.n	8005bce <__ssputs_r+0x70>
 8005c08:	6921      	ldr	r1, [r4, #16]
 8005c0a:	4650      	mov	r0, sl
 8005c0c:	f000 fab4 	bl	8006178 <_free_r>
 8005c10:	e7c8      	b.n	8005ba4 <__ssputs_r+0x46>
	...

08005c14 <_svfiprintf_r>:
 8005c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c18:	461d      	mov	r5, r3
 8005c1a:	898b      	ldrh	r3, [r1, #12]
 8005c1c:	061f      	lsls	r7, r3, #24
 8005c1e:	b09d      	sub	sp, #116	; 0x74
 8005c20:	4680      	mov	r8, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	4616      	mov	r6, r2
 8005c26:	d50f      	bpl.n	8005c48 <_svfiprintf_r+0x34>
 8005c28:	690b      	ldr	r3, [r1, #16]
 8005c2a:	b96b      	cbnz	r3, 8005c48 <_svfiprintf_r+0x34>
 8005c2c:	2140      	movs	r1, #64	; 0x40
 8005c2e:	f000 faf1 	bl	8006214 <_malloc_r>
 8005c32:	6020      	str	r0, [r4, #0]
 8005c34:	6120      	str	r0, [r4, #16]
 8005c36:	b928      	cbnz	r0, 8005c44 <_svfiprintf_r+0x30>
 8005c38:	230c      	movs	r3, #12
 8005c3a:	f8c8 3000 	str.w	r3, [r8]
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c42:	e0c8      	b.n	8005dd6 <_svfiprintf_r+0x1c2>
 8005c44:	2340      	movs	r3, #64	; 0x40
 8005c46:	6163      	str	r3, [r4, #20]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c4c:	2320      	movs	r3, #32
 8005c4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c52:	2330      	movs	r3, #48	; 0x30
 8005c54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c58:	9503      	str	r5, [sp, #12]
 8005c5a:	f04f 0b01 	mov.w	fp, #1
 8005c5e:	4637      	mov	r7, r6
 8005c60:	463d      	mov	r5, r7
 8005c62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005c66:	b10b      	cbz	r3, 8005c6c <_svfiprintf_r+0x58>
 8005c68:	2b25      	cmp	r3, #37	; 0x25
 8005c6a:	d13e      	bne.n	8005cea <_svfiprintf_r+0xd6>
 8005c6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005c70:	d00b      	beq.n	8005c8a <_svfiprintf_r+0x76>
 8005c72:	4653      	mov	r3, sl
 8005c74:	4632      	mov	r2, r6
 8005c76:	4621      	mov	r1, r4
 8005c78:	4640      	mov	r0, r8
 8005c7a:	f7ff ff70 	bl	8005b5e <__ssputs_r>
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f000 80a4 	beq.w	8005dcc <_svfiprintf_r+0x1b8>
 8005c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c86:	4453      	add	r3, sl
 8005c88:	9309      	str	r3, [sp, #36]	; 0x24
 8005c8a:	783b      	ldrb	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 809d 	beq.w	8005dcc <_svfiprintf_r+0x1b8>
 8005c92:	2300      	movs	r3, #0
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295
 8005c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c9c:	9304      	str	r3, [sp, #16]
 8005c9e:	9307      	str	r3, [sp, #28]
 8005ca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ca4:	931a      	str	r3, [sp, #104]	; 0x68
 8005ca6:	462f      	mov	r7, r5
 8005ca8:	2205      	movs	r2, #5
 8005caa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005cae:	4850      	ldr	r0, [pc, #320]	; (8005df0 <_svfiprintf_r+0x1dc>)
 8005cb0:	f7fa faae 	bl	8000210 <memchr>
 8005cb4:	9b04      	ldr	r3, [sp, #16]
 8005cb6:	b9d0      	cbnz	r0, 8005cee <_svfiprintf_r+0xda>
 8005cb8:	06d9      	lsls	r1, r3, #27
 8005cba:	bf44      	itt	mi
 8005cbc:	2220      	movmi	r2, #32
 8005cbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005cc2:	071a      	lsls	r2, r3, #28
 8005cc4:	bf44      	itt	mi
 8005cc6:	222b      	movmi	r2, #43	; 0x2b
 8005cc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ccc:	782a      	ldrb	r2, [r5, #0]
 8005cce:	2a2a      	cmp	r2, #42	; 0x2a
 8005cd0:	d015      	beq.n	8005cfe <_svfiprintf_r+0xea>
 8005cd2:	9a07      	ldr	r2, [sp, #28]
 8005cd4:	462f      	mov	r7, r5
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	250a      	movs	r5, #10
 8005cda:	4639      	mov	r1, r7
 8005cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ce0:	3b30      	subs	r3, #48	; 0x30
 8005ce2:	2b09      	cmp	r3, #9
 8005ce4:	d94d      	bls.n	8005d82 <_svfiprintf_r+0x16e>
 8005ce6:	b1b8      	cbz	r0, 8005d18 <_svfiprintf_r+0x104>
 8005ce8:	e00f      	b.n	8005d0a <_svfiprintf_r+0xf6>
 8005cea:	462f      	mov	r7, r5
 8005cec:	e7b8      	b.n	8005c60 <_svfiprintf_r+0x4c>
 8005cee:	4a40      	ldr	r2, [pc, #256]	; (8005df0 <_svfiprintf_r+0x1dc>)
 8005cf0:	1a80      	subs	r0, r0, r2
 8005cf2:	fa0b f000 	lsl.w	r0, fp, r0
 8005cf6:	4318      	orrs	r0, r3
 8005cf8:	9004      	str	r0, [sp, #16]
 8005cfa:	463d      	mov	r5, r7
 8005cfc:	e7d3      	b.n	8005ca6 <_svfiprintf_r+0x92>
 8005cfe:	9a03      	ldr	r2, [sp, #12]
 8005d00:	1d11      	adds	r1, r2, #4
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	9103      	str	r1, [sp, #12]
 8005d06:	2a00      	cmp	r2, #0
 8005d08:	db01      	blt.n	8005d0e <_svfiprintf_r+0xfa>
 8005d0a:	9207      	str	r2, [sp, #28]
 8005d0c:	e004      	b.n	8005d18 <_svfiprintf_r+0x104>
 8005d0e:	4252      	negs	r2, r2
 8005d10:	f043 0302 	orr.w	r3, r3, #2
 8005d14:	9207      	str	r2, [sp, #28]
 8005d16:	9304      	str	r3, [sp, #16]
 8005d18:	783b      	ldrb	r3, [r7, #0]
 8005d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8005d1c:	d10c      	bne.n	8005d38 <_svfiprintf_r+0x124>
 8005d1e:	787b      	ldrb	r3, [r7, #1]
 8005d20:	2b2a      	cmp	r3, #42	; 0x2a
 8005d22:	d133      	bne.n	8005d8c <_svfiprintf_r+0x178>
 8005d24:	9b03      	ldr	r3, [sp, #12]
 8005d26:	1d1a      	adds	r2, r3, #4
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	9203      	str	r2, [sp, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	bfb8      	it	lt
 8005d30:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d34:	3702      	adds	r7, #2
 8005d36:	9305      	str	r3, [sp, #20]
 8005d38:	4d2e      	ldr	r5, [pc, #184]	; (8005df4 <_svfiprintf_r+0x1e0>)
 8005d3a:	7839      	ldrb	r1, [r7, #0]
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f7fa fa66 	bl	8000210 <memchr>
 8005d44:	b138      	cbz	r0, 8005d56 <_svfiprintf_r+0x142>
 8005d46:	2340      	movs	r3, #64	; 0x40
 8005d48:	1b40      	subs	r0, r0, r5
 8005d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8005d4e:	9b04      	ldr	r3, [sp, #16]
 8005d50:	4303      	orrs	r3, r0
 8005d52:	3701      	adds	r7, #1
 8005d54:	9304      	str	r3, [sp, #16]
 8005d56:	7839      	ldrb	r1, [r7, #0]
 8005d58:	4827      	ldr	r0, [pc, #156]	; (8005df8 <_svfiprintf_r+0x1e4>)
 8005d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d5e:	2206      	movs	r2, #6
 8005d60:	1c7e      	adds	r6, r7, #1
 8005d62:	f7fa fa55 	bl	8000210 <memchr>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d038      	beq.n	8005ddc <_svfiprintf_r+0x1c8>
 8005d6a:	4b24      	ldr	r3, [pc, #144]	; (8005dfc <_svfiprintf_r+0x1e8>)
 8005d6c:	bb13      	cbnz	r3, 8005db4 <_svfiprintf_r+0x1a0>
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	3307      	adds	r3, #7
 8005d72:	f023 0307 	bic.w	r3, r3, #7
 8005d76:	3308      	adds	r3, #8
 8005d78:	9303      	str	r3, [sp, #12]
 8005d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d7c:	444b      	add	r3, r9
 8005d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d80:	e76d      	b.n	8005c5e <_svfiprintf_r+0x4a>
 8005d82:	fb05 3202 	mla	r2, r5, r2, r3
 8005d86:	2001      	movs	r0, #1
 8005d88:	460f      	mov	r7, r1
 8005d8a:	e7a6      	b.n	8005cda <_svfiprintf_r+0xc6>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	3701      	adds	r7, #1
 8005d90:	9305      	str	r3, [sp, #20]
 8005d92:	4619      	mov	r1, r3
 8005d94:	250a      	movs	r5, #10
 8005d96:	4638      	mov	r0, r7
 8005d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d9c:	3a30      	subs	r2, #48	; 0x30
 8005d9e:	2a09      	cmp	r2, #9
 8005da0:	d903      	bls.n	8005daa <_svfiprintf_r+0x196>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0c8      	beq.n	8005d38 <_svfiprintf_r+0x124>
 8005da6:	9105      	str	r1, [sp, #20]
 8005da8:	e7c6      	b.n	8005d38 <_svfiprintf_r+0x124>
 8005daa:	fb05 2101 	mla	r1, r5, r1, r2
 8005dae:	2301      	movs	r3, #1
 8005db0:	4607      	mov	r7, r0
 8005db2:	e7f0      	b.n	8005d96 <_svfiprintf_r+0x182>
 8005db4:	ab03      	add	r3, sp, #12
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	4622      	mov	r2, r4
 8005dba:	4b11      	ldr	r3, [pc, #68]	; (8005e00 <_svfiprintf_r+0x1ec>)
 8005dbc:	a904      	add	r1, sp, #16
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	f3af 8000 	nop.w
 8005dc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005dc8:	4681      	mov	r9, r0
 8005dca:	d1d6      	bne.n	8005d7a <_svfiprintf_r+0x166>
 8005dcc:	89a3      	ldrh	r3, [r4, #12]
 8005dce:	065b      	lsls	r3, r3, #25
 8005dd0:	f53f af35 	bmi.w	8005c3e <_svfiprintf_r+0x2a>
 8005dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dd6:	b01d      	add	sp, #116	; 0x74
 8005dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ddc:	ab03      	add	r3, sp, #12
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	4622      	mov	r2, r4
 8005de2:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <_svfiprintf_r+0x1ec>)
 8005de4:	a904      	add	r1, sp, #16
 8005de6:	4640      	mov	r0, r8
 8005de8:	f000 f882 	bl	8005ef0 <_printf_i>
 8005dec:	e7ea      	b.n	8005dc4 <_svfiprintf_r+0x1b0>
 8005dee:	bf00      	nop
 8005df0:	0800639a 	.word	0x0800639a
 8005df4:	080063a0 	.word	0x080063a0
 8005df8:	080063a4 	.word	0x080063a4
 8005dfc:	00000000 	.word	0x00000000
 8005e00:	08005b5f 	.word	0x08005b5f

08005e04 <_printf_common>:
 8005e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	4691      	mov	r9, r2
 8005e0a:	461f      	mov	r7, r3
 8005e0c:	688a      	ldr	r2, [r1, #8]
 8005e0e:	690b      	ldr	r3, [r1, #16]
 8005e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e14:	4293      	cmp	r3, r2
 8005e16:	bfb8      	it	lt
 8005e18:	4613      	movlt	r3, r2
 8005e1a:	f8c9 3000 	str.w	r3, [r9]
 8005e1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e22:	4606      	mov	r6, r0
 8005e24:	460c      	mov	r4, r1
 8005e26:	b112      	cbz	r2, 8005e2e <_printf_common+0x2a>
 8005e28:	3301      	adds	r3, #1
 8005e2a:	f8c9 3000 	str.w	r3, [r9]
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	0699      	lsls	r1, r3, #26
 8005e32:	bf42      	ittt	mi
 8005e34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005e38:	3302      	addmi	r3, #2
 8005e3a:	f8c9 3000 	strmi.w	r3, [r9]
 8005e3e:	6825      	ldr	r5, [r4, #0]
 8005e40:	f015 0506 	ands.w	r5, r5, #6
 8005e44:	d107      	bne.n	8005e56 <_printf_common+0x52>
 8005e46:	f104 0a19 	add.w	sl, r4, #25
 8005e4a:	68e3      	ldr	r3, [r4, #12]
 8005e4c:	f8d9 2000 	ldr.w	r2, [r9]
 8005e50:	1a9b      	subs	r3, r3, r2
 8005e52:	42ab      	cmp	r3, r5
 8005e54:	dc28      	bgt.n	8005ea8 <_printf_common+0xa4>
 8005e56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005e5a:	6822      	ldr	r2, [r4, #0]
 8005e5c:	3300      	adds	r3, #0
 8005e5e:	bf18      	it	ne
 8005e60:	2301      	movne	r3, #1
 8005e62:	0692      	lsls	r2, r2, #26
 8005e64:	d42d      	bmi.n	8005ec2 <_printf_common+0xbe>
 8005e66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e6a:	4639      	mov	r1, r7
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	47c0      	blx	r8
 8005e70:	3001      	adds	r0, #1
 8005e72:	d020      	beq.n	8005eb6 <_printf_common+0xb2>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	68e5      	ldr	r5, [r4, #12]
 8005e78:	f8d9 2000 	ldr.w	r2, [r9]
 8005e7c:	f003 0306 	and.w	r3, r3, #6
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	bf08      	it	eq
 8005e84:	1aad      	subeq	r5, r5, r2
 8005e86:	68a3      	ldr	r3, [r4, #8]
 8005e88:	6922      	ldr	r2, [r4, #16]
 8005e8a:	bf0c      	ite	eq
 8005e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e90:	2500      	movne	r5, #0
 8005e92:	4293      	cmp	r3, r2
 8005e94:	bfc4      	itt	gt
 8005e96:	1a9b      	subgt	r3, r3, r2
 8005e98:	18ed      	addgt	r5, r5, r3
 8005e9a:	f04f 0900 	mov.w	r9, #0
 8005e9e:	341a      	adds	r4, #26
 8005ea0:	454d      	cmp	r5, r9
 8005ea2:	d11a      	bne.n	8005eda <_printf_common+0xd6>
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	e008      	b.n	8005eba <_printf_common+0xb6>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4652      	mov	r2, sl
 8005eac:	4639      	mov	r1, r7
 8005eae:	4630      	mov	r0, r6
 8005eb0:	47c0      	blx	r8
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d103      	bne.n	8005ebe <_printf_common+0xba>
 8005eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebe:	3501      	adds	r5, #1
 8005ec0:	e7c3      	b.n	8005e4a <_printf_common+0x46>
 8005ec2:	18e1      	adds	r1, r4, r3
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	2030      	movs	r0, #48	; 0x30
 8005ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ecc:	4422      	add	r2, r4
 8005ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ed2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ed6:	3302      	adds	r3, #2
 8005ed8:	e7c5      	b.n	8005e66 <_printf_common+0x62>
 8005eda:	2301      	movs	r3, #1
 8005edc:	4622      	mov	r2, r4
 8005ede:	4639      	mov	r1, r7
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	47c0      	blx	r8
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d0e6      	beq.n	8005eb6 <_printf_common+0xb2>
 8005ee8:	f109 0901 	add.w	r9, r9, #1
 8005eec:	e7d8      	b.n	8005ea0 <_printf_common+0x9c>
	...

08005ef0 <_printf_i>:
 8005ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ef4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ef8:	460c      	mov	r4, r1
 8005efa:	7e09      	ldrb	r1, [r1, #24]
 8005efc:	b085      	sub	sp, #20
 8005efe:	296e      	cmp	r1, #110	; 0x6e
 8005f00:	4617      	mov	r7, r2
 8005f02:	4606      	mov	r6, r0
 8005f04:	4698      	mov	r8, r3
 8005f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f08:	f000 80b3 	beq.w	8006072 <_printf_i+0x182>
 8005f0c:	d822      	bhi.n	8005f54 <_printf_i+0x64>
 8005f0e:	2963      	cmp	r1, #99	; 0x63
 8005f10:	d036      	beq.n	8005f80 <_printf_i+0x90>
 8005f12:	d80a      	bhi.n	8005f2a <_printf_i+0x3a>
 8005f14:	2900      	cmp	r1, #0
 8005f16:	f000 80b9 	beq.w	800608c <_printf_i+0x19c>
 8005f1a:	2958      	cmp	r1, #88	; 0x58
 8005f1c:	f000 8083 	beq.w	8006026 <_printf_i+0x136>
 8005f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005f28:	e032      	b.n	8005f90 <_printf_i+0xa0>
 8005f2a:	2964      	cmp	r1, #100	; 0x64
 8005f2c:	d001      	beq.n	8005f32 <_printf_i+0x42>
 8005f2e:	2969      	cmp	r1, #105	; 0x69
 8005f30:	d1f6      	bne.n	8005f20 <_printf_i+0x30>
 8005f32:	6820      	ldr	r0, [r4, #0]
 8005f34:	6813      	ldr	r3, [r2, #0]
 8005f36:	0605      	lsls	r5, r0, #24
 8005f38:	f103 0104 	add.w	r1, r3, #4
 8005f3c:	d52a      	bpl.n	8005f94 <_printf_i+0xa4>
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6011      	str	r1, [r2, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	da03      	bge.n	8005f4e <_printf_i+0x5e>
 8005f46:	222d      	movs	r2, #45	; 0x2d
 8005f48:	425b      	negs	r3, r3
 8005f4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005f4e:	486f      	ldr	r0, [pc, #444]	; (800610c <_printf_i+0x21c>)
 8005f50:	220a      	movs	r2, #10
 8005f52:	e039      	b.n	8005fc8 <_printf_i+0xd8>
 8005f54:	2973      	cmp	r1, #115	; 0x73
 8005f56:	f000 809d 	beq.w	8006094 <_printf_i+0x1a4>
 8005f5a:	d808      	bhi.n	8005f6e <_printf_i+0x7e>
 8005f5c:	296f      	cmp	r1, #111	; 0x6f
 8005f5e:	d020      	beq.n	8005fa2 <_printf_i+0xb2>
 8005f60:	2970      	cmp	r1, #112	; 0x70
 8005f62:	d1dd      	bne.n	8005f20 <_printf_i+0x30>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	f043 0320 	orr.w	r3, r3, #32
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	e003      	b.n	8005f76 <_printf_i+0x86>
 8005f6e:	2975      	cmp	r1, #117	; 0x75
 8005f70:	d017      	beq.n	8005fa2 <_printf_i+0xb2>
 8005f72:	2978      	cmp	r1, #120	; 0x78
 8005f74:	d1d4      	bne.n	8005f20 <_printf_i+0x30>
 8005f76:	2378      	movs	r3, #120	; 0x78
 8005f78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f7c:	4864      	ldr	r0, [pc, #400]	; (8006110 <_printf_i+0x220>)
 8005f7e:	e055      	b.n	800602c <_printf_i+0x13c>
 8005f80:	6813      	ldr	r3, [r2, #0]
 8005f82:	1d19      	adds	r1, r3, #4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6011      	str	r1, [r2, #0]
 8005f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f90:	2301      	movs	r3, #1
 8005f92:	e08c      	b.n	80060ae <_printf_i+0x1be>
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6011      	str	r1, [r2, #0]
 8005f98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f9c:	bf18      	it	ne
 8005f9e:	b21b      	sxthne	r3, r3
 8005fa0:	e7cf      	b.n	8005f42 <_printf_i+0x52>
 8005fa2:	6813      	ldr	r3, [r2, #0]
 8005fa4:	6825      	ldr	r5, [r4, #0]
 8005fa6:	1d18      	adds	r0, r3, #4
 8005fa8:	6010      	str	r0, [r2, #0]
 8005faa:	0628      	lsls	r0, r5, #24
 8005fac:	d501      	bpl.n	8005fb2 <_printf_i+0xc2>
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	e002      	b.n	8005fb8 <_printf_i+0xc8>
 8005fb2:	0668      	lsls	r0, r5, #25
 8005fb4:	d5fb      	bpl.n	8005fae <_printf_i+0xbe>
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	4854      	ldr	r0, [pc, #336]	; (800610c <_printf_i+0x21c>)
 8005fba:	296f      	cmp	r1, #111	; 0x6f
 8005fbc:	bf14      	ite	ne
 8005fbe:	220a      	movne	r2, #10
 8005fc0:	2208      	moveq	r2, #8
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fc8:	6865      	ldr	r5, [r4, #4]
 8005fca:	60a5      	str	r5, [r4, #8]
 8005fcc:	2d00      	cmp	r5, #0
 8005fce:	f2c0 8095 	blt.w	80060fc <_printf_i+0x20c>
 8005fd2:	6821      	ldr	r1, [r4, #0]
 8005fd4:	f021 0104 	bic.w	r1, r1, #4
 8005fd8:	6021      	str	r1, [r4, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d13d      	bne.n	800605a <_printf_i+0x16a>
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	f040 808e 	bne.w	8006100 <_printf_i+0x210>
 8005fe4:	4665      	mov	r5, ip
 8005fe6:	2a08      	cmp	r2, #8
 8005fe8:	d10b      	bne.n	8006002 <_printf_i+0x112>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	07db      	lsls	r3, r3, #31
 8005fee:	d508      	bpl.n	8006002 <_printf_i+0x112>
 8005ff0:	6923      	ldr	r3, [r4, #16]
 8005ff2:	6862      	ldr	r2, [r4, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	bfde      	ittt	le
 8005ff8:	2330      	movle	r3, #48	; 0x30
 8005ffa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ffe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006002:	ebac 0305 	sub.w	r3, ip, r5
 8006006:	6123      	str	r3, [r4, #16]
 8006008:	f8cd 8000 	str.w	r8, [sp]
 800600c:	463b      	mov	r3, r7
 800600e:	aa03      	add	r2, sp, #12
 8006010:	4621      	mov	r1, r4
 8006012:	4630      	mov	r0, r6
 8006014:	f7ff fef6 	bl	8005e04 <_printf_common>
 8006018:	3001      	adds	r0, #1
 800601a:	d14d      	bne.n	80060b8 <_printf_i+0x1c8>
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	b005      	add	sp, #20
 8006022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006026:	4839      	ldr	r0, [pc, #228]	; (800610c <_printf_i+0x21c>)
 8006028:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800602c:	6813      	ldr	r3, [r2, #0]
 800602e:	6821      	ldr	r1, [r4, #0]
 8006030:	1d1d      	adds	r5, r3, #4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6015      	str	r5, [r2, #0]
 8006036:	060a      	lsls	r2, r1, #24
 8006038:	d50b      	bpl.n	8006052 <_printf_i+0x162>
 800603a:	07ca      	lsls	r2, r1, #31
 800603c:	bf44      	itt	mi
 800603e:	f041 0120 	orrmi.w	r1, r1, #32
 8006042:	6021      	strmi	r1, [r4, #0]
 8006044:	b91b      	cbnz	r3, 800604e <_printf_i+0x15e>
 8006046:	6822      	ldr	r2, [r4, #0]
 8006048:	f022 0220 	bic.w	r2, r2, #32
 800604c:	6022      	str	r2, [r4, #0]
 800604e:	2210      	movs	r2, #16
 8006050:	e7b7      	b.n	8005fc2 <_printf_i+0xd2>
 8006052:	064d      	lsls	r5, r1, #25
 8006054:	bf48      	it	mi
 8006056:	b29b      	uxthmi	r3, r3
 8006058:	e7ef      	b.n	800603a <_printf_i+0x14a>
 800605a:	4665      	mov	r5, ip
 800605c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006060:	fb02 3311 	mls	r3, r2, r1, r3
 8006064:	5cc3      	ldrb	r3, [r0, r3]
 8006066:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800606a:	460b      	mov	r3, r1
 800606c:	2900      	cmp	r1, #0
 800606e:	d1f5      	bne.n	800605c <_printf_i+0x16c>
 8006070:	e7b9      	b.n	8005fe6 <_printf_i+0xf6>
 8006072:	6813      	ldr	r3, [r2, #0]
 8006074:	6825      	ldr	r5, [r4, #0]
 8006076:	6961      	ldr	r1, [r4, #20]
 8006078:	1d18      	adds	r0, r3, #4
 800607a:	6010      	str	r0, [r2, #0]
 800607c:	0628      	lsls	r0, r5, #24
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	d501      	bpl.n	8006086 <_printf_i+0x196>
 8006082:	6019      	str	r1, [r3, #0]
 8006084:	e002      	b.n	800608c <_printf_i+0x19c>
 8006086:	066a      	lsls	r2, r5, #25
 8006088:	d5fb      	bpl.n	8006082 <_printf_i+0x192>
 800608a:	8019      	strh	r1, [r3, #0]
 800608c:	2300      	movs	r3, #0
 800608e:	6123      	str	r3, [r4, #16]
 8006090:	4665      	mov	r5, ip
 8006092:	e7b9      	b.n	8006008 <_printf_i+0x118>
 8006094:	6813      	ldr	r3, [r2, #0]
 8006096:	1d19      	adds	r1, r3, #4
 8006098:	6011      	str	r1, [r2, #0]
 800609a:	681d      	ldr	r5, [r3, #0]
 800609c:	6862      	ldr	r2, [r4, #4]
 800609e:	2100      	movs	r1, #0
 80060a0:	4628      	mov	r0, r5
 80060a2:	f7fa f8b5 	bl	8000210 <memchr>
 80060a6:	b108      	cbz	r0, 80060ac <_printf_i+0x1bc>
 80060a8:	1b40      	subs	r0, r0, r5
 80060aa:	6060      	str	r0, [r4, #4]
 80060ac:	6863      	ldr	r3, [r4, #4]
 80060ae:	6123      	str	r3, [r4, #16]
 80060b0:	2300      	movs	r3, #0
 80060b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b6:	e7a7      	b.n	8006008 <_printf_i+0x118>
 80060b8:	6923      	ldr	r3, [r4, #16]
 80060ba:	462a      	mov	r2, r5
 80060bc:	4639      	mov	r1, r7
 80060be:	4630      	mov	r0, r6
 80060c0:	47c0      	blx	r8
 80060c2:	3001      	adds	r0, #1
 80060c4:	d0aa      	beq.n	800601c <_printf_i+0x12c>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	079b      	lsls	r3, r3, #30
 80060ca:	d413      	bmi.n	80060f4 <_printf_i+0x204>
 80060cc:	68e0      	ldr	r0, [r4, #12]
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	4298      	cmp	r0, r3
 80060d2:	bfb8      	it	lt
 80060d4:	4618      	movlt	r0, r3
 80060d6:	e7a3      	b.n	8006020 <_printf_i+0x130>
 80060d8:	2301      	movs	r3, #1
 80060da:	464a      	mov	r2, r9
 80060dc:	4639      	mov	r1, r7
 80060de:	4630      	mov	r0, r6
 80060e0:	47c0      	blx	r8
 80060e2:	3001      	adds	r0, #1
 80060e4:	d09a      	beq.n	800601c <_printf_i+0x12c>
 80060e6:	3501      	adds	r5, #1
 80060e8:	68e3      	ldr	r3, [r4, #12]
 80060ea:	9a03      	ldr	r2, [sp, #12]
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	42ab      	cmp	r3, r5
 80060f0:	dcf2      	bgt.n	80060d8 <_printf_i+0x1e8>
 80060f2:	e7eb      	b.n	80060cc <_printf_i+0x1dc>
 80060f4:	2500      	movs	r5, #0
 80060f6:	f104 0919 	add.w	r9, r4, #25
 80060fa:	e7f5      	b.n	80060e8 <_printf_i+0x1f8>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1ac      	bne.n	800605a <_printf_i+0x16a>
 8006100:	7803      	ldrb	r3, [r0, #0]
 8006102:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006106:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800610a:	e76c      	b.n	8005fe6 <_printf_i+0xf6>
 800610c:	080063ab 	.word	0x080063ab
 8006110:	080063bc 	.word	0x080063bc

08006114 <__ascii_wctomb>:
 8006114:	b149      	cbz	r1, 800612a <__ascii_wctomb+0x16>
 8006116:	2aff      	cmp	r2, #255	; 0xff
 8006118:	bf85      	ittet	hi
 800611a:	238a      	movhi	r3, #138	; 0x8a
 800611c:	6003      	strhi	r3, [r0, #0]
 800611e:	700a      	strbls	r2, [r1, #0]
 8006120:	f04f 30ff 	movhi.w	r0, #4294967295
 8006124:	bf98      	it	ls
 8006126:	2001      	movls	r0, #1
 8006128:	4770      	bx	lr
 800612a:	4608      	mov	r0, r1
 800612c:	4770      	bx	lr

0800612e <memcpy>:
 800612e:	b510      	push	{r4, lr}
 8006130:	1e43      	subs	r3, r0, #1
 8006132:	440a      	add	r2, r1
 8006134:	4291      	cmp	r1, r2
 8006136:	d100      	bne.n	800613a <memcpy+0xc>
 8006138:	bd10      	pop	{r4, pc}
 800613a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800613e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006142:	e7f7      	b.n	8006134 <memcpy+0x6>

08006144 <memmove>:
 8006144:	4288      	cmp	r0, r1
 8006146:	b510      	push	{r4, lr}
 8006148:	eb01 0302 	add.w	r3, r1, r2
 800614c:	d807      	bhi.n	800615e <memmove+0x1a>
 800614e:	1e42      	subs	r2, r0, #1
 8006150:	4299      	cmp	r1, r3
 8006152:	d00a      	beq.n	800616a <memmove+0x26>
 8006154:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006158:	f802 4f01 	strb.w	r4, [r2, #1]!
 800615c:	e7f8      	b.n	8006150 <memmove+0xc>
 800615e:	4283      	cmp	r3, r0
 8006160:	d9f5      	bls.n	800614e <memmove+0xa>
 8006162:	1881      	adds	r1, r0, r2
 8006164:	1ad2      	subs	r2, r2, r3
 8006166:	42d3      	cmn	r3, r2
 8006168:	d100      	bne.n	800616c <memmove+0x28>
 800616a:	bd10      	pop	{r4, pc}
 800616c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006170:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006174:	e7f7      	b.n	8006166 <memmove+0x22>
	...

08006178 <_free_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4605      	mov	r5, r0
 800617c:	2900      	cmp	r1, #0
 800617e:	d045      	beq.n	800620c <_free_r+0x94>
 8006180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006184:	1f0c      	subs	r4, r1, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	bfb8      	it	lt
 800618a:	18e4      	addlt	r4, r4, r3
 800618c:	f000 f8d2 	bl	8006334 <__malloc_lock>
 8006190:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <_free_r+0x98>)
 8006192:	6813      	ldr	r3, [r2, #0]
 8006194:	4610      	mov	r0, r2
 8006196:	b933      	cbnz	r3, 80061a6 <_free_r+0x2e>
 8006198:	6063      	str	r3, [r4, #4]
 800619a:	6014      	str	r4, [r2, #0]
 800619c:	4628      	mov	r0, r5
 800619e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a2:	f000 b8c8 	b.w	8006336 <__malloc_unlock>
 80061a6:	42a3      	cmp	r3, r4
 80061a8:	d90c      	bls.n	80061c4 <_free_r+0x4c>
 80061aa:	6821      	ldr	r1, [r4, #0]
 80061ac:	1862      	adds	r2, r4, r1
 80061ae:	4293      	cmp	r3, r2
 80061b0:	bf04      	itt	eq
 80061b2:	681a      	ldreq	r2, [r3, #0]
 80061b4:	685b      	ldreq	r3, [r3, #4]
 80061b6:	6063      	str	r3, [r4, #4]
 80061b8:	bf04      	itt	eq
 80061ba:	1852      	addeq	r2, r2, r1
 80061bc:	6022      	streq	r2, [r4, #0]
 80061be:	6004      	str	r4, [r0, #0]
 80061c0:	e7ec      	b.n	800619c <_free_r+0x24>
 80061c2:	4613      	mov	r3, r2
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	b10a      	cbz	r2, 80061cc <_free_r+0x54>
 80061c8:	42a2      	cmp	r2, r4
 80061ca:	d9fa      	bls.n	80061c2 <_free_r+0x4a>
 80061cc:	6819      	ldr	r1, [r3, #0]
 80061ce:	1858      	adds	r0, r3, r1
 80061d0:	42a0      	cmp	r0, r4
 80061d2:	d10b      	bne.n	80061ec <_free_r+0x74>
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	4401      	add	r1, r0
 80061d8:	1858      	adds	r0, r3, r1
 80061da:	4282      	cmp	r2, r0
 80061dc:	6019      	str	r1, [r3, #0]
 80061de:	d1dd      	bne.n	800619c <_free_r+0x24>
 80061e0:	6810      	ldr	r0, [r2, #0]
 80061e2:	6852      	ldr	r2, [r2, #4]
 80061e4:	605a      	str	r2, [r3, #4]
 80061e6:	4401      	add	r1, r0
 80061e8:	6019      	str	r1, [r3, #0]
 80061ea:	e7d7      	b.n	800619c <_free_r+0x24>
 80061ec:	d902      	bls.n	80061f4 <_free_r+0x7c>
 80061ee:	230c      	movs	r3, #12
 80061f0:	602b      	str	r3, [r5, #0]
 80061f2:	e7d3      	b.n	800619c <_free_r+0x24>
 80061f4:	6820      	ldr	r0, [r4, #0]
 80061f6:	1821      	adds	r1, r4, r0
 80061f8:	428a      	cmp	r2, r1
 80061fa:	bf04      	itt	eq
 80061fc:	6811      	ldreq	r1, [r2, #0]
 80061fe:	6852      	ldreq	r2, [r2, #4]
 8006200:	6062      	str	r2, [r4, #4]
 8006202:	bf04      	itt	eq
 8006204:	1809      	addeq	r1, r1, r0
 8006206:	6021      	streq	r1, [r4, #0]
 8006208:	605c      	str	r4, [r3, #4]
 800620a:	e7c7      	b.n	800619c <_free_r+0x24>
 800620c:	bd38      	pop	{r3, r4, r5, pc}
 800620e:	bf00      	nop
 8006210:	200001fc 	.word	0x200001fc

08006214 <_malloc_r>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	1ccd      	adds	r5, r1, #3
 8006218:	f025 0503 	bic.w	r5, r5, #3
 800621c:	3508      	adds	r5, #8
 800621e:	2d0c      	cmp	r5, #12
 8006220:	bf38      	it	cc
 8006222:	250c      	movcc	r5, #12
 8006224:	2d00      	cmp	r5, #0
 8006226:	4606      	mov	r6, r0
 8006228:	db01      	blt.n	800622e <_malloc_r+0x1a>
 800622a:	42a9      	cmp	r1, r5
 800622c:	d903      	bls.n	8006236 <_malloc_r+0x22>
 800622e:	230c      	movs	r3, #12
 8006230:	6033      	str	r3, [r6, #0]
 8006232:	2000      	movs	r0, #0
 8006234:	bd70      	pop	{r4, r5, r6, pc}
 8006236:	f000 f87d 	bl	8006334 <__malloc_lock>
 800623a:	4a21      	ldr	r2, [pc, #132]	; (80062c0 <_malloc_r+0xac>)
 800623c:	6814      	ldr	r4, [r2, #0]
 800623e:	4621      	mov	r1, r4
 8006240:	b991      	cbnz	r1, 8006268 <_malloc_r+0x54>
 8006242:	4c20      	ldr	r4, [pc, #128]	; (80062c4 <_malloc_r+0xb0>)
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	b91b      	cbnz	r3, 8006250 <_malloc_r+0x3c>
 8006248:	4630      	mov	r0, r6
 800624a:	f000 f863 	bl	8006314 <_sbrk_r>
 800624e:	6020      	str	r0, [r4, #0]
 8006250:	4629      	mov	r1, r5
 8006252:	4630      	mov	r0, r6
 8006254:	f000 f85e 	bl	8006314 <_sbrk_r>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d124      	bne.n	80062a6 <_malloc_r+0x92>
 800625c:	230c      	movs	r3, #12
 800625e:	6033      	str	r3, [r6, #0]
 8006260:	4630      	mov	r0, r6
 8006262:	f000 f868 	bl	8006336 <__malloc_unlock>
 8006266:	e7e4      	b.n	8006232 <_malloc_r+0x1e>
 8006268:	680b      	ldr	r3, [r1, #0]
 800626a:	1b5b      	subs	r3, r3, r5
 800626c:	d418      	bmi.n	80062a0 <_malloc_r+0x8c>
 800626e:	2b0b      	cmp	r3, #11
 8006270:	d90f      	bls.n	8006292 <_malloc_r+0x7e>
 8006272:	600b      	str	r3, [r1, #0]
 8006274:	50cd      	str	r5, [r1, r3]
 8006276:	18cc      	adds	r4, r1, r3
 8006278:	4630      	mov	r0, r6
 800627a:	f000 f85c 	bl	8006336 <__malloc_unlock>
 800627e:	f104 000b 	add.w	r0, r4, #11
 8006282:	1d23      	adds	r3, r4, #4
 8006284:	f020 0007 	bic.w	r0, r0, #7
 8006288:	1ac3      	subs	r3, r0, r3
 800628a:	d0d3      	beq.n	8006234 <_malloc_r+0x20>
 800628c:	425a      	negs	r2, r3
 800628e:	50e2      	str	r2, [r4, r3]
 8006290:	e7d0      	b.n	8006234 <_malloc_r+0x20>
 8006292:	428c      	cmp	r4, r1
 8006294:	684b      	ldr	r3, [r1, #4]
 8006296:	bf16      	itet	ne
 8006298:	6063      	strne	r3, [r4, #4]
 800629a:	6013      	streq	r3, [r2, #0]
 800629c:	460c      	movne	r4, r1
 800629e:	e7eb      	b.n	8006278 <_malloc_r+0x64>
 80062a0:	460c      	mov	r4, r1
 80062a2:	6849      	ldr	r1, [r1, #4]
 80062a4:	e7cc      	b.n	8006240 <_malloc_r+0x2c>
 80062a6:	1cc4      	adds	r4, r0, #3
 80062a8:	f024 0403 	bic.w	r4, r4, #3
 80062ac:	42a0      	cmp	r0, r4
 80062ae:	d005      	beq.n	80062bc <_malloc_r+0xa8>
 80062b0:	1a21      	subs	r1, r4, r0
 80062b2:	4630      	mov	r0, r6
 80062b4:	f000 f82e 	bl	8006314 <_sbrk_r>
 80062b8:	3001      	adds	r0, #1
 80062ba:	d0cf      	beq.n	800625c <_malloc_r+0x48>
 80062bc:	6025      	str	r5, [r4, #0]
 80062be:	e7db      	b.n	8006278 <_malloc_r+0x64>
 80062c0:	200001fc 	.word	0x200001fc
 80062c4:	20000200 	.word	0x20000200

080062c8 <_realloc_r>:
 80062c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ca:	4607      	mov	r7, r0
 80062cc:	4614      	mov	r4, r2
 80062ce:	460e      	mov	r6, r1
 80062d0:	b921      	cbnz	r1, 80062dc <_realloc_r+0x14>
 80062d2:	4611      	mov	r1, r2
 80062d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062d8:	f7ff bf9c 	b.w	8006214 <_malloc_r>
 80062dc:	b922      	cbnz	r2, 80062e8 <_realloc_r+0x20>
 80062de:	f7ff ff4b 	bl	8006178 <_free_r>
 80062e2:	4625      	mov	r5, r4
 80062e4:	4628      	mov	r0, r5
 80062e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e8:	f000 f826 	bl	8006338 <_malloc_usable_size_r>
 80062ec:	42a0      	cmp	r0, r4
 80062ee:	d20f      	bcs.n	8006310 <_realloc_r+0x48>
 80062f0:	4621      	mov	r1, r4
 80062f2:	4638      	mov	r0, r7
 80062f4:	f7ff ff8e 	bl	8006214 <_malloc_r>
 80062f8:	4605      	mov	r5, r0
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d0f2      	beq.n	80062e4 <_realloc_r+0x1c>
 80062fe:	4631      	mov	r1, r6
 8006300:	4622      	mov	r2, r4
 8006302:	f7ff ff14 	bl	800612e <memcpy>
 8006306:	4631      	mov	r1, r6
 8006308:	4638      	mov	r0, r7
 800630a:	f7ff ff35 	bl	8006178 <_free_r>
 800630e:	e7e9      	b.n	80062e4 <_realloc_r+0x1c>
 8006310:	4635      	mov	r5, r6
 8006312:	e7e7      	b.n	80062e4 <_realloc_r+0x1c>

08006314 <_sbrk_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4c06      	ldr	r4, [pc, #24]	; (8006330 <_sbrk_r+0x1c>)
 8006318:	2300      	movs	r3, #0
 800631a:	4605      	mov	r5, r0
 800631c:	4608      	mov	r0, r1
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	f7fb f85e 	bl	80013e0 <_sbrk>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d102      	bne.n	800632e <_sbrk_r+0x1a>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	b103      	cbz	r3, 800632e <_sbrk_r+0x1a>
 800632c:	602b      	str	r3, [r5, #0]
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	20000748 	.word	0x20000748

08006334 <__malloc_lock>:
 8006334:	4770      	bx	lr

08006336 <__malloc_unlock>:
 8006336:	4770      	bx	lr

08006338 <_malloc_usable_size_r>:
 8006338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800633c:	1f18      	subs	r0, r3, #4
 800633e:	2b00      	cmp	r3, #0
 8006340:	bfbc      	itt	lt
 8006342:	580b      	ldrlt	r3, [r1, r0]
 8006344:	18c0      	addlt	r0, r0, r3
 8006346:	4770      	bx	lr

08006348 <_init>:
 8006348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634a:	bf00      	nop
 800634c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634e:	bc08      	pop	{r3}
 8006350:	469e      	mov	lr, r3
 8006352:	4770      	bx	lr

08006354 <_fini>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	bf00      	nop
 8006358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800635a:	bc08      	pop	{r3}
 800635c:	469e      	mov	lr, r3
 800635e:	4770      	bx	lr
